{
    "sourceFile": "image_detector.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 32,
            "patches": [
                {
                    "date": 1750493481589,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1750495706314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,325 +1,208 @@\n-\"\"\"\r\n-画像検出機能モジュール\r\n-妖怪ウォッチぷにぷに自動周回ソフト用の画像認識・検出機能\r\n-\"\"\"\r\n-\r\n import cv2\r\n import numpy as np\r\n-import time\r\n+from typing import List, Tuple, Optional, Dict\r\n+import logging\r\n+import os\r\n+from concurrent.futures import ThreadPoolExecutor\r\n+import asyncio\r\n+from io import BytesIO\r\n+from PIL import Image\r\n \r\n \r\n class ImageDetector:\r\n-    def __init__(self, similarity_threshold=0.8):\r\n-        self.similarity_threshold = similarity_threshold\r\n+    \"\"\"OpenCV2を使用した画像認識クラス\"\"\"\r\n+    \r\n+    def __init__(self, template_dir: str = \"image\"):\r\n+        self.template_dir = template_dir\r\n+        self.templates = {}\r\n+        self.logger = logging.getLogger(__name__)\r\n+        self.executor = ThreadPoolExecutor(max_workers=8)\r\n+        self.load_templates()\r\n         \r\n-    def find_image_on_screen_optimized(self, template_path, screenshot, threshold=None):\r\n-        \"\"\"最適化された画像検索\"\"\"\r\n-        if threshold is None:\r\n-            threshold = self.similarity_threshold\r\n-            \r\n+    def load_templates(self):\r\n+        \"\"\"テンプレート画像をメモリに読み込み\"\"\"\r\n+        template_files = {\r\n+            'boss': 'boss.jpg',\r\n+            'play': 'play.png',\r\n+            'puzzle': 'puzzle.png',\r\n+            'waza_ok': 'waza_ok.png',\r\n+            'next': 'next.png',\r\n+            'stage_45': 'stage_45.png',\r\n+            'close': 'close.png',\r\n+            'close_mini': 'close_mini.png'\r\n+        }\r\n+        \r\n+        for name, filename in template_files.items():\r\n+            filepath = os.path.join(self.template_dir, filename)\r\n+            if os.path.exists(filepath):\r\n+                template = cv2.imread(filepath, cv2.IMREAD_COLOR)\r\n+                if template is not None:\r\n+                    self.templates[name] = template\r\n+                    self.logger.info(f\"テンプレート '{name}' を読み込みました\")\r\n+                else:\r\n+                    self.logger.warning(f\"テンプレート '{name}' の読み込みに失敗しました\")\r\n+            else:\r\n+                self.logger.warning(f\"テンプレートファイル '{filepath}' が見つかりません\")\r\n+    \r\n+    def bytes_to_cv2(self, image_bytes: bytes) -> Optional[np.ndarray]:\r\n+        \"\"\"バイト列をOpenCV2の画像形式に変換\"\"\"\r\n         try:\r\n-            template = cv2.imread(template_path)\r\n-            if template is None:\r\n+            if not image_bytes:\r\n                 return None\r\n             \r\n-            # テンプレートマッチング（高速化）\r\n-            result = cv2.matchTemplate(screenshot, template, cv2.TM_CCOEFF_NORMED)\r\n-            min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)\r\n+            # PNG形式の場合のバイト修正（ADBのスクリーンショットの場合）\r\n+            if image_bytes.startswith(b'\\x89PNG'):\r\n+                # PNG形式そのまま\r\n+                nparr = np.frombuffer(image_bytes, np.uint8)\r\n+                img = cv2.imdecode(nparr, cv2.IMREAD_COLOR)\r\n+            else:\r\n+                # その他の形式\r\n+                nparr = np.frombuffer(image_bytes, np.uint8)\r\n+                img = cv2.imdecode(nparr, cv2.IMREAD_COLOR)\r\n             \r\n-            if max_val >= threshold:\r\n-                h, w = template.shape[:2]\r\n-                center_x = max_loc[0] + w // 2\r\n-                center_y = max_loc[1] + h // 2\r\n-                \r\n-                return (center_x, center_y)\r\n-            else:\r\n-                return None\r\n-                \r\n+            return img\r\n         except Exception as e:\r\n-            print(f\"最適化画像検索エラー: {str(e)}\")\r\n+            self.logger.error(f\"画像変換エラー: {e}\")\r\n             return None\r\n-            \r\n-    def find_multiple_images_on_screen_optimized(self, template_paths, screenshot, threshold=None):\r\n-        \"\"\"最適化された複数画像同時検索\"\"\"\r\n-        if threshold is None:\r\n-            threshold = self.similarity_threshold\r\n-            \r\n-        try:\r\n-            results = {}\r\n-            for name, template_path in template_paths.items():\r\n-                template = cv2.imread(template_path)\r\n-                if template is None:\r\n-                    continue\r\n-                \r\n-                # テンプレートマッチング（高速化）\r\n-                result = cv2.matchTemplate(screenshot, template, cv2.TM_CCOEFF_NORMED)\r\n-                min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)\r\n-                \r\n-                if max_val >= threshold:\r\n-                    h, w = template.shape[:2]\r\n-                    center_x = max_loc[0] + w // 2\r\n-                    center_y = max_loc[1] + h // 2\r\n-                    \r\n-                    results[name] = {\r\n-                        'pos': (center_x, center_y),\r\n-                        'confidence': max_val\r\n-                    }\r\n-            \r\n-            return results\r\n-                \r\n-        except Exception as e:\r\n-            print(f\"最適化複数画像検索エラー: {str(e)}\")\r\n-            return {}\r\n     \r\n-    def find_image_with_multiple_thresholds(self, template_path, screenshot, initial_threshold=None):\r\n-        \"\"\"複数の閾値で画像を検索（段階的に閾値を下げる）\"\"\"\r\n-        if initial_threshold is None:\r\n-            initial_threshold = self.similarity_threshold\r\n+    def find_template(self, screen_img: np.ndarray, template_name: str, \r\n+                     threshold: float = 0.8) -> Optional[Tuple[int, int, int, int]]:\r\n+        \"\"\"テンプレートマッチングで画像を検索\"\"\"\r\n+        if template_name not in self.templates:\r\n+            self.logger.warning(f\"テンプレート '{template_name}' が見つかりません\")\r\n+            return None\r\n         \r\n-        # 段階的に閾値を下げて検索\r\n-        thresholds = [initial_threshold, initial_threshold - 0.1, initial_threshold - 0.2, 0.6]\r\n-        \r\n-        for threshold in thresholds:\r\n-            if threshold < 0.5:  # 最低限の閾値\r\n-                break\r\n-                \r\n-            result = self.find_image_on_screen_optimized(template_path, screenshot, threshold)\r\n-            if result:\r\n-                return result\r\n-        \r\n-        return None\r\n-\r\n-    def find_puzzle_with_enhanced_detection(self, puzzle_path, screenshot):\r\n-        \"\"\"puzzle.png専用の超強化検知機能\"\"\"\r\n-        template = cv2.imread(puzzle_path)\r\n-        if template is None:\r\n+        template = self.templates[template_name]\r\n+        if screen_img is None or template is None:\r\n             return None\r\n         \r\n-        # 検出方法1: 段階的閾値検索\r\n-        thresholds = [self.similarity_threshold, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3]\r\n-        for i, threshold in enumerate(thresholds):\r\n-            result = cv2.matchTemplate(screenshot, template, cv2.TM_CCOEFF_NORMED)\r\n+        try:\r\n+            # テンプレートマッチング実行\r\n+            result = cv2.matchTemplate(screen_img, template, cv2.TM_CCOEFF_NORMED)\r\n             min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)\r\n             \r\n             if max_val >= threshold:\r\n+                # マッチした位置とサイズを返す\r\n                 h, w = template.shape[:2]\r\n-                center_x = max_loc[0] + w // 2\r\n-                center_y = max_loc[1] + h // 2\r\n-                return (center_x, center_y)\r\n+                x, y = max_loc\r\n+                return (x, y, x + w, y + h)\r\n+            \r\n+            return None\r\n+        except Exception as e:\r\n+            self.logger.error(f\"テンプレートマッチングエラー ({template_name}): {e}\")\r\n+            return None\r\n+    \r\n+    def get_center_point(self, bbox: Tuple[int, int, int, int]) -> Tuple[int, int]:\r\n+        \"\"\"バウンディングボックスの中心座標を取得\"\"\"\r\n+        x1, y1, x2, y2 = bbox\r\n+        center_x = (x1 + x2) // 2\r\n+        center_y = (y1 + y2) // 2\r\n+        return center_x, center_y\r\n+    \r\n+    async def detect_all_templates_async(self, screen_bytes: bytes, \r\n+                                       threshold: float = 0.8) -> Dict[str, Optional[Tuple[int, int]]]:\r\n+        \"\"\"全テンプレートを非同期で検索\"\"\"\r\n+        screen_img = self.bytes_to_cv2(screen_bytes)\r\n+        if screen_img is None:\r\n+            return {name: None for name in self.templates.keys()}\r\n         \r\n-        # 検出方法2: 複数マッチング手法\r\n-        matching_methods = [\r\n-            cv2.TM_CCOEFF_NORMED,\r\n-            cv2.TM_CCORR_NORMED,\r\n-            cv2.TM_SQDIFF_NORMED\r\n-        ]\r\n+        loop = asyncio.get_event_loop()\r\n+        tasks = []\r\n         \r\n-        for method_idx, method in enumerate(matching_methods):\r\n-            try:\r\n-                result = cv2.matchTemplate(screenshot, template, method)\r\n-                min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)\r\n-                \r\n-                # TM_SQDIFF_NORMEDの場合は最小値を使用\r\n-                if method == cv2.TM_SQDIFF_NORMED:\r\n-                    if min_val <= 0.4:  # 低い値が良いマッチ\r\n-                        h, w = template.shape[:2]\r\n-                        center_x = min_loc[0] + w // 2\r\n-                        center_y = min_loc[1] + h // 2\r\n-                        return (center_x, center_y)\r\n-                else:\r\n-                    if max_val >= 0.3:\r\n-                        h, w = template.shape[:2]\r\n-                        center_x = max_loc[0] + w // 2\r\n-                        center_y = max_loc[1] + h // 2\r\n-                        return (center_x, center_y)\r\n-            except Exception as e:\r\n-                continue\r\n+        for template_name in self.templates.keys():\r\n+            task = loop.run_in_executor(\r\n+                self.executor, \r\n+                self.find_template, \r\n+                screen_img, \r\n+                template_name, \r\n+                threshold\r\n+            )\r\n+            tasks.append((template_name, task))\r\n         \r\n-        # 検出方法3: スケール変換対応\r\n-        scales = [1.0, 0.9, 1.1, 0.8, 1.2, 0.7, 1.3]\r\n-        for scale in scales:\r\n+        results = {}\r\n+        for template_name, task in tasks:\r\n             try:\r\n-                if scale != 1.0:\r\n-                    h, w = template.shape[:2]\r\n-                    new_h, new_w = int(h * scale), int(w * scale)\r\n-                    scaled_template = cv2.resize(template, (new_w, new_h))\r\n+                bbox = await task\r\n+                if bbox:\r\n+                    center = self.get_center_point(bbox)\r\n+                    results[template_name] = center\r\n                 else:\r\n-                    scaled_template = template\r\n-                \r\n-                result = cv2.matchTemplate(screenshot, scaled_template, cv2.TM_CCOEFF_NORMED)\r\n-                min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)\r\n-                \r\n-                if max_val >= 0.3:\r\n-                    h, w = scaled_template.shape[:2]\r\n-                    center_x = max_loc[0] + w // 2\r\n-                    center_y = max_loc[1] + h // 2\r\n-                    return (center_x, center_y)\r\n+                    results[template_name] = None\r\n             except Exception as e:\r\n-                continue\r\n+                self.logger.error(f\"テンプレート検索エラー ({template_name}): {e}\")\r\n+                results[template_name] = None\r\n         \r\n-        # 検出方法4: グレースケール＋エッジ検出\r\n-        try:\r\n-            gray_screenshot = cv2.cvtColor(screenshot, cv2.COLOR_BGR2GRAY)\r\n-            gray_template = cv2.cvtColor(template, cv2.COLOR_BGR2GRAY)\r\n-            \r\n-            # エッジ検出\r\n-            screenshot_edges = cv2.Canny(gray_screenshot, 50, 150)\r\n-            template_edges = cv2.Canny(gray_template, 50, 150)\r\n-            \r\n-            result = cv2.matchTemplate(screenshot_edges, template_edges, cv2.TM_CCOEFF_NORMED)\r\n-            min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)\r\n-            \r\n-            if max_val >= 0.2:  # エッジ検出は閾値を下げる\r\n-                h, w = template_edges.shape[:2]\r\n-                center_x = max_loc[0] + w // 2\r\n-                center_y = max_loc[1] + h // 2\r\n-                return (center_x, center_y)\r\n-        except Exception as e:\r\n-            pass\r\n+        return results\r\n+    \r\n+    def detect_template_sync(self, screen_bytes: bytes, template_name: str,\r\n+                           threshold: float = 0.8) -> Optional[Tuple[int, int]]:\r\n+        \"\"\"同期的にテンプレートを検索\"\"\"\r\n+        screen_img = self.bytes_to_cv2(screen_bytes)\r\n+        if screen_img is None:\r\n+            return None\r\n         \r\n-        # 検出方法5: HSV色空間での検索\r\n-        try:\r\n-            hsv_screenshot = cv2.cvtColor(screenshot, cv2.COLOR_BGR2HSV)\r\n-            hsv_template = cv2.cvtColor(template, cv2.COLOR_BGR2HSV)\r\n-            \r\n-            result = cv2.matchTemplate(hsv_screenshot, hsv_template, cv2.TM_CCOEFF_NORMED)\r\n-            min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)\r\n-            \r\n-            if max_val >= 0.25:\r\n-                h, w = hsv_template.shape[:2]\r\n-                center_x = max_loc[0] + w // 2\r\n-                center_y = max_loc[1] + h // 2\r\n-                return (center_x, center_y)\r\n-        except Exception as e:\r\n-            pass\r\n-        \r\n-        # 検出方法6: 画像の明度調整\r\n-        try:\r\n-            # 明度を調整したバージョンで試行\r\n-            brightness_adjustments = [1.2, 0.8, 1.5, 0.6]\r\n-            for brightness in brightness_adjustments:\r\n-                adjusted_screenshot = cv2.convertScaleAbs(screenshot, alpha=brightness, beta=0)\r\n-                result = cv2.matchTemplate(adjusted_screenshot, template, cv2.TM_CCOEFF_NORMED)\r\n-                min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)\r\n-                \r\n-                if max_val >= 0.3:\r\n-                    h, w = template.shape[:2]\r\n-                    center_x = max_loc[0] + w // 2\r\n-                    center_y = max_loc[1] + h // 2\r\n-                    return (center_x, center_y)\r\n-        except Exception as e:\r\n-            pass\r\n-        \r\n+        bbox = self.find_template(screen_img, template_name, threshold)\r\n+        if bbox:\r\n+            return self.get_center_point(bbox)\r\n         return None\r\n-\r\n-    def test_normal_matching(self, screenshot, template):\r\n-        \"\"\"通常マッチングテスト\"\"\"\r\n-        thresholds = [0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2]\r\n-        for threshold in thresholds:\r\n-            result = cv2.matchTemplate(screenshot, template, cv2.TM_CCOEFF_NORMED)\r\n-            min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)\r\n-            if max_val >= threshold:\r\n-                h, w = template.shape[:2]\r\n-                center_x, center_y = max_loc[0] + w // 2, max_loc[1] + h // 2\r\n-                return f\"(閾値: {threshold:.1f}, 信頼度: {max_val:.3f}, 位置: ({center_x}, {center_y}))\"\r\n-        return None\r\n     \r\n-    def test_multiple_algorithms(self, screenshot, template):\r\n-        \"\"\"複数アルゴリズムテスト\"\"\"\r\n-        algorithms = [\r\n-            (cv2.TM_CCOEFF_NORMED, \"CCOEFF_NORMED\"),\r\n-            (cv2.TM_CCORR_NORMED, \"CCORR_NORMED\"),\r\n-            (cv2.TM_SQDIFF_NORMED, \"SQDIFF_NORMED\")\r\n-        ]\r\n+    def detect_multiple_templates(self, screen_bytes: bytes, template_names: List[str],\r\n+                                threshold: float = 0.8) -> Dict[str, Optional[Tuple[int, int]]]:\r\n+        \"\"\"複数のテンプレートを同期的に検索\"\"\"\r\n+        screen_img = self.bytes_to_cv2(screen_bytes)\r\n+        results = {}\r\n         \r\n-        for method, name in algorithms:\r\n-            try:\r\n-                result = cv2.matchTemplate(screenshot, template, method)\r\n-                min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)\r\n-                \r\n-                if method == cv2.TM_SQDIFF_NORMED:\r\n-                    if min_val <= 0.4:\r\n-                        h, w = template.shape[:2]\r\n-                        center_x, center_y = min_loc[0] + w // 2, min_loc[1] + h // 2\r\n-                        return f\"({name}, 信頼度: {1-min_val:.3f}, 位置: ({center_x}, {center_y}))\"\r\n-                else:\r\n-                    if max_val >= 0.3:\r\n-                        h, w = template.shape[:2]\r\n-                        center_x, center_y = max_loc[0] + w // 2, max_loc[1] + h // 2\r\n-                        return f\"({name}, 信頼度: {max_val:.3f}, 位置: ({center_x}, {center_y}))\"\r\n-            except:\r\n-                continue\r\n-        return None\r\n+        if screen_img is None:\r\n+            return {name: None for name in template_names}\r\n+        \r\n+        for template_name in template_names:\r\n+            bbox = self.find_template(screen_img, template_name, threshold)\r\n+            if bbox:\r\n+                results[template_name] = self.get_center_point(bbox)\r\n+            else:\r\n+                results[template_name] = None\r\n+        \r\n+        return results\r\n     \r\n-    def test_scale_matching(self, screenshot, template):\r\n-        \"\"\"スケールマッチングテスト\"\"\"\r\n-        scales = [1.0, 0.9, 1.1, 0.8, 1.2, 0.7, 1.3]\r\n-        for scale in scales:\r\n-            try:\r\n-                h, w = template.shape[:2]\r\n-                new_h, new_w = int(h * scale), int(w * scale)\r\n-                if new_w > 0 and new_h > 0:\r\n-                    scaled_template = cv2.resize(template, (new_w, new_h))\r\n-                    result = cv2.matchTemplate(screenshot, scaled_template, cv2.TM_CCOEFF_NORMED)\r\n-                    min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)\r\n-                    if max_val >= 0.3:\r\n-                        sh, sw = scaled_template.shape[:2]\r\n-                        center_x, center_y = max_loc[0] + sw // 2, max_loc[1] + sh // 2\r\n-                        return f\"(スケール: {scale:.1f}, 信頼度: {max_val:.3f}, 位置: ({center_x}, {center_y}))\"\r\n-            except:\r\n-                continue\r\n-        return None\r\n+    def update_template(self, template_name: str, template_path: str):\r\n+        \"\"\"テンプレートを更新\"\"\"\r\n+        if os.path.exists(template_path):\r\n+            template = cv2.imread(template_path, cv2.IMREAD_COLOR)\r\n+            if template is not None:\r\n+                self.templates[template_name] = template\r\n+                self.logger.info(f\"テンプレート '{template_name}' を更新しました\")\r\n+                return True\r\n+        return False\r\n     \r\n-    def test_edge_matching(self, screenshot, template):\r\n-        \"\"\"エッジマッチングテスト\"\"\"\r\n-        try:\r\n-            gray_screenshot = cv2.cvtColor(screenshot, cv2.COLOR_BGR2GRAY)\r\n-            gray_template = cv2.cvtColor(template, cv2.COLOR_BGR2GRAY)\r\n-            \r\n-            screenshot_edges = cv2.Canny(gray_screenshot, 50, 150)\r\n-            template_edges = cv2.Canny(gray_template, 50, 150)\r\n-            \r\n-            result = cv2.matchTemplate(screenshot_edges, template_edges, cv2.TM_CCOEFF_NORMED)\r\n-            min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)\r\n-            \r\n-            if max_val >= 0.2:\r\n-                h, w = template_edges.shape[:2]\r\n-                center_x, center_y = max_loc[0] + w // 2, max_loc[1] + h // 2\r\n-                return f\"(エッジ検出, 信頼度: {max_val:.3f}, 位置: ({center_x}, {center_y}))\"\r\n-        except:\r\n-            pass\r\n-        return None\r\n+    def get_template_names(self) -> List[str]:\r\n+        \"\"\"読み込み済みテンプレート名一覧を取得\"\"\"\r\n+        return list(self.templates.keys())\r\n+\r\n+\r\n+class MultiDeviceImageDetector:\r\n+    \"\"\"複数デバイス用画像認識クラス\"\"\"\r\n     \r\n-    def test_hsv_matching(self, screenshot, template):\r\n-        \"\"\"HSVマッチングテスト\"\"\"\r\n-        try:\r\n-            hsv_screenshot = cv2.cvtColor(screenshot, cv2.COLOR_BGR2HSV)\r\n-            hsv_template = cv2.cvtColor(template, cv2.COLOR_BGR2HSV)\r\n-            \r\n-            result = cv2.matchTemplate(hsv_screenshot, hsv_template, cv2.TM_CCOEFF_NORMED)\r\n-            min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)\r\n-            \r\n-            if max_val >= 0.25:\r\n-                h, w = hsv_template.shape[:2]\r\n-                center_x, center_y = max_loc[0] + w // 2, max_loc[1] + h // 2\r\n-                return f\"(HSV色空間, 信頼度: {max_val:.3f}, 位置: ({center_x}, {center_y}))\"\r\n-        except:\r\n-            pass\r\n-        return None\r\n-    \r\n-    def test_brightness_matching(self, screenshot, template):\r\n-        \"\"\"明度調整マッチングテスト\"\"\"\r\n-        brightness_values = [1.2, 0.8, 1.5, 0.6, 1.8, 0.4]\r\n-        for brightness in brightness_values:\r\n+    def __init__(self, template_dir: str = \"image\"):\r\n+        self.detector = ImageDetector(template_dir)\r\n+        self.logger = logging.getLogger(__name__)\r\n+        \r\n+    async def detect_all_devices(self, screen_data_dict: Dict[str, bytes],\r\n+                               threshold: float = 0.8) -> Dict[str, Dict[str, Optional[Tuple[int, int]]]]:\r\n+        \"\"\"全デバイスで全テンプレートを検索\"\"\"\r\n+        tasks = []\r\n+        \r\n+        for device_id, screen_bytes in screen_data_dict.items():\r\n+            if screen_bytes:\r\n+                task = self.detector.detect_all_templates_async(screen_bytes, threshold)\r\n+                tasks.append((device_id, task))\r\n+        \r\n+        results = {}\r\n+        for device_id, task in tasks:\r\n             try:\r\n-                adjusted_screenshot = cv2.convertScaleAbs(screenshot, alpha=brightness, beta=0)\r\n-                result = cv2.matchTemplate(adjusted_screenshot, template, cv2.TM_CCOEFF_NORMED)\r\n-                min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)\r\n-                \r\n-                if max_val >= 0.3:\r\n-                    h, w = template.shape[:2]\r\n-                    center_x, center_y = max_loc[0] + w // 2, max_loc[1] + h // 2\r\n-                    return f\"(明度: {brightness:.1f}, 信頼度: {max_val:.3f}, 位置: ({center_x}, {center_y}))\"\r\n-            except:\r\n-                continue\r\n-        return None\r\n+                detection_result = await task\r\n+                results[device_id] = detection_result\r\n+            except Exception as e:\r\n+                self.logger.error(f\"デバイス {device_id} の検索エラー: {e}\")\r\n+                results[device_id] = {name: None for name in self.detector.get_template_names()}\r\n+        \r\n+        return results\r\n"
                },
                {
                    "date": 1750503566065,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,8 +23,9 @@\n         \"\"\"テンプレート画像をメモリに読み込み\"\"\"\r\n         template_files = {\r\n             'boss': 'boss.jpg',\r\n             'play': 'play.png',\r\n+            'play_2': 'play_2.png',  # 追加\r\n             'puzzle': 'puzzle.png',\r\n             'waza_ok': 'waza_ok.png',\r\n             'next': 'next.png',\r\n             'stage_45': 'stage_45.png',\r\n"
                },
                {
                    "date": 1750503579058,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n         \"\"\"テンプレート画像をメモリに読み込み\"\"\"\r\n         template_files = {\r\n             'boss': 'boss.jpg',\r\n             'play': 'play.png',\r\n-            'play_2': 'play_2.png',  # 追加\r\n+            'play_2': 'play_2.png',\r\n             'puzzle': 'puzzle.png',\r\n             'waza_ok': 'waza_ok.png',\r\n             'next': 'next.png',\r\n             'stage_45': 'stage_45.png',\r\n"
                },
                {
                    "date": 1750503615618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n         \"\"\"テンプレート画像をメモリに読み込み\"\"\"\r\n         template_files = {\r\n             'boss': 'boss.jpg',\r\n             'play': 'play.png',\r\n-            'play_2': 'play_2.png',\r\n+            'play_2': 'play_2.png',  # 追加\r\n             'puzzle': 'puzzle.png',\r\n             'waza_ok': 'waza_ok.png',\r\n             'next': 'next.png',\r\n             'stage_45': 'stage_45.png',\r\n"
                },
                {
                    "date": 1750504406798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n     def __init__(self, template_dir: str = \"image\"):\r\n         self.template_dir = template_dir\r\n         self.templates = {}\r\n         self.logger = logging.getLogger(__name__)\r\n-        self.executor = ThreadPoolExecutor(max_workers=8)\r\n+        self.executor = ThreadPoolExecutor(max_workers=16)  # 高速化のためスレッド数増加\r\n         self.load_templates()\r\n         \r\n     def load_templates(self):\r\n         \"\"\"テンプレート画像をメモリに読み込み\"\"\"\r\n"
                },
                {
                    "date": 1750504422398,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n     def __init__(self, template_dir: str = \"image\"):\r\n         self.template_dir = template_dir\r\n         self.templates = {}\r\n         self.logger = logging.getLogger(__name__)\r\n-        self.executor = ThreadPoolExecutor(max_workers=16)  # 高速化のためスレッド数増加\r\n+        self.executor = ThreadPoolExecutor(max_workers=500)  # 高速化のためスレッド数増加\r\n         self.load_templates()\r\n         \r\n     def load_templates(self):\r\n         \"\"\"テンプレート画像をメモリに読み込み\"\"\"\r\n"
                },
                {
                    "date": 1750504609679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n     def __init__(self, template_dir: str = \"image\"):\r\n         self.template_dir = template_dir\r\n         self.templates = {}\r\n         self.logger = logging.getLogger(__name__)\r\n-        self.executor = ThreadPoolExecutor(max_workers=500)  # 高速化のためスレッド数増加\r\n+        self.executor = ThreadPoolExecutor(max_workers=16)  # 高速化のためスレッド数増加\r\n         self.load_templates()\r\n         \r\n     def load_templates(self):\r\n         \"\"\"テンプレート画像をメモリに読み込み\"\"\"\r\n"
                },
                {
                    "date": 1750505246436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import numpy as np\r\n from typing import List, Tuple, Optional, Dict\r\n import logging\r\n import os\r\n-from concurrent.futures import ThreadPoolExecutor\r\n+from concurrent.futures import ProcessPoolExecutor\r\n import asyncio\r\n from io import BytesIO\r\n from PIL import Image\r\n \r\n@@ -15,9 +15,9 @@\n     def __init__(self, template_dir: str = \"image\"):\r\n         self.template_dir = template_dir\r\n         self.templates = {}\r\n         self.logger = logging.getLogger(__name__)\r\n-        self.executor = ThreadPoolExecutor(max_workers=16)  # 高速化のためスレッド数増加\r\n+        self.executor = ProcessPoolExecutor(max_workers=os.cpu_count() or 4)  # プロセス並列化\r\n         self.load_templates()\r\n         \r\n     def load_templates(self):\r\n         \"\"\"テンプレート画像をメモリに読み込み\"\"\"\r\n@@ -100,24 +100,26 @@\n         center_y = (y1 + y2) // 2\r\n         return center_x, center_y\r\n     \r\n     async def detect_all_templates_async(self, screen_bytes: bytes, \r\n-                                       threshold: float = 0.8) -> Dict[str, Optional[Tuple[int, int]]]:\r\n-        \"\"\"全テンプレートを非同期で検索\"\"\"\r\n+                                       thresholds: Optional[Dict[str, float]] = None, threshold: float = 0.8) -> Dict[str, Optional[Tuple[int, int]]]:\r\n+        \"\"\"全テンプレートを非同期で検索（画像ごとに個別threshold指定可）\"\"\"\r\n         screen_img = self.bytes_to_cv2(screen_bytes)\r\n         if screen_img is None:\r\n             return {name: None for name in self.templates.keys()}\r\n         \r\n         loop = asyncio.get_event_loop()\r\n         tasks = []\r\n-        \r\n         for template_name in self.templates.keys():\r\n+            t = threshold\r\n+            if thresholds and template_name in thresholds:\r\n+                t = thresholds[template_name]\r\n             task = loop.run_in_executor(\r\n                 self.executor, \r\n                 self.find_template, \r\n                 screen_img, \r\n                 template_name, \r\n-                threshold\r\n+                t\r\n             )\r\n             tasks.append((template_name, task))\r\n         \r\n         results = {}\r\n@@ -147,18 +149,21 @@\n             return self.get_center_point(bbox)\r\n         return None\r\n     \r\n     def detect_multiple_templates(self, screen_bytes: bytes, template_names: List[str],\r\n-                                threshold: float = 0.8) -> Dict[str, Optional[Tuple[int, int]]]:\r\n-        \"\"\"複数のテンプレートを同期的に検索\"\"\"\r\n+                                thresholds: Optional[Dict[str, float]] = None, threshold: float = 0.8) -> Dict[str, Optional[Tuple[int, int]]]:\r\n+        \"\"\"複数のテンプレートを同期的に検索（画像ごとに個別threshold指定可）\"\"\"\r\n         screen_img = self.bytes_to_cv2(screen_bytes)\r\n         results = {}\r\n         \r\n         if screen_img is None:\r\n             return {name: None for name in template_names}\r\n         \r\n         for template_name in template_names:\r\n-            bbox = self.find_template(screen_img, template_name, threshold)\r\n+            t = threshold\r\n+            if thresholds and template_name in thresholds:\r\n+                t = thresholds[template_name]\r\n+            bbox = self.find_template(screen_img, template_name, t)\r\n             if bbox:\r\n                 results[template_name] = self.get_center_point(bbox)\r\n             else:\r\n                 results[template_name] = None\r\n"
                },
                {
                    "date": 1750506623955,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,13 @@\n             'boss': 'boss.jpg',\r\n             'play': 'play.png',\r\n             'play_2': 'play_2.png',  # 追加\r\n             'puzzle': 'puzzle.png',\r\n+            'puzzle_2': 'puzzle_2.png',  # 追加\r\n+            'puzzle_3': 'puzzle_3.png',  # 追加\r\n             'waza_ok': 'waza_ok.png',\r\n+            'waza_ok_2': 'waza_ok_2.png',  # 追加\r\n+            'waza_ok_3': 'waza_ok_3.png',  # 追加\r\n             'next': 'next.png',\r\n             'stage_45': 'stage_45.png',\r\n             'close': 'close.png',\r\n             'close_mini': 'close_mini.png'\r\n@@ -110,9 +114,9 @@\n         loop = asyncio.get_event_loop()\r\n         tasks = []\r\n         for template_name in self.templates.keys():\r\n             t = threshold\r\n-            if thresholds and template_name in thresholds:\r\n+            if isinstance(thresholds, dict) and template_name in thresholds:\r\n                 t = thresholds[template_name]\r\n             task = loop.run_in_executor(\r\n                 self.executor, \r\n                 self.find_template, \r\n@@ -159,9 +163,9 @@\n             return {name: None for name in template_names}\r\n         \r\n         for template_name in template_names:\r\n             t = threshold\r\n-            if thresholds and template_name in thresholds:\r\n+            if isinstance(thresholds, dict) and template_name in thresholds:\r\n                 t = thresholds[template_name]\r\n             bbox = self.find_template(screen_img, template_name, t)\r\n             if bbox:\r\n                 results[template_name] = self.get_center_point(bbox)\r\n"
                },
                {
                    "date": 1750506671100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import numpy as np\r\n from typing import List, Tuple, Optional, Dict\r\n import logging\r\n import os\r\n-from concurrent.futures import ProcessPoolExecutor\r\n+from concurrent.futures import ThreadPoolExecutor\r\n import asyncio\r\n from io import BytesIO\r\n from PIL import Image\r\n \r\n@@ -15,9 +15,9 @@\n     def __init__(self, template_dir: str = \"image\"):\r\n         self.template_dir = template_dir\r\n         self.templates = {}\r\n         self.logger = logging.getLogger(__name__)\r\n-        self.executor = ProcessPoolExecutor(max_workers=os.cpu_count() or 4)  # プロセス並列化\r\n+        self.executor = ThreadPoolExecutor(max_workers=16)  # 高速化のためスレッド数増加\r\n         self.load_templates()\r\n         \r\n     def load_templates(self):\r\n         \"\"\"テンプレート画像をメモリに読み込み\"\"\"\r\n@@ -25,13 +25,9 @@\n             'boss': 'boss.jpg',\r\n             'play': 'play.png',\r\n             'play_2': 'play_2.png',  # 追加\r\n             'puzzle': 'puzzle.png',\r\n-            'puzzle_2': 'puzzle_2.png',  # 追加\r\n-            'puzzle_3': 'puzzle_3.png',  # 追加\r\n             'waza_ok': 'waza_ok.png',\r\n-            'waza_ok_2': 'waza_ok_2.png',  # 追加\r\n-            'waza_ok_3': 'waza_ok_3.png',  # 追加\r\n             'next': 'next.png',\r\n             'stage_45': 'stage_45.png',\r\n             'close': 'close.png',\r\n             'close_mini': 'close_mini.png'\r\n@@ -104,26 +100,24 @@\n         center_y = (y1 + y2) // 2\r\n         return center_x, center_y\r\n     \r\n     async def detect_all_templates_async(self, screen_bytes: bytes, \r\n-                                       thresholds: Optional[Dict[str, float]] = None, threshold: float = 0.8) -> Dict[str, Optional[Tuple[int, int]]]:\r\n-        \"\"\"全テンプレートを非同期で検索（画像ごとに個別threshold指定可）\"\"\"\r\n+                                       threshold: float = 0.8) -> Dict[str, Optional[Tuple[int, int]]]:\r\n+        \"\"\"全テンプレートを非同期で検索\"\"\"\r\n         screen_img = self.bytes_to_cv2(screen_bytes)\r\n         if screen_img is None:\r\n             return {name: None for name in self.templates.keys()}\r\n         \r\n         loop = asyncio.get_event_loop()\r\n         tasks = []\r\n+        \r\n         for template_name in self.templates.keys():\r\n-            t = threshold\r\n-            if isinstance(thresholds, dict) and template_name in thresholds:\r\n-                t = thresholds[template_name]\r\n             task = loop.run_in_executor(\r\n                 self.executor, \r\n                 self.find_template, \r\n                 screen_img, \r\n                 template_name, \r\n-                t\r\n+                threshold\r\n             )\r\n             tasks.append((template_name, task))\r\n         \r\n         results = {}\r\n@@ -153,21 +147,18 @@\n             return self.get_center_point(bbox)\r\n         return None\r\n     \r\n     def detect_multiple_templates(self, screen_bytes: bytes, template_names: List[str],\r\n-                                thresholds: Optional[Dict[str, float]] = None, threshold: float = 0.8) -> Dict[str, Optional[Tuple[int, int]]]:\r\n-        \"\"\"複数のテンプレートを同期的に検索（画像ごとに個別threshold指定可）\"\"\"\r\n+                                threshold: float = 0.8) -> Dict[str, Optional[Tuple[int, int]]]:\r\n+        \"\"\"複数のテンプレートを同期的に検索\"\"\"\r\n         screen_img = self.bytes_to_cv2(screen_bytes)\r\n         results = {}\r\n         \r\n         if screen_img is None:\r\n             return {name: None for name in template_names}\r\n         \r\n         for template_name in template_names:\r\n-            t = threshold\r\n-            if isinstance(thresholds, dict) and template_name in thresholds:\r\n-                t = thresholds[template_name]\r\n-            bbox = self.find_template(screen_img, template_name, t)\r\n+            bbox = self.find_template(screen_img, template_name, threshold)\r\n             if bbox:\r\n                 results[template_name] = self.get_center_point(bbox)\r\n             else:\r\n                 results[template_name] = None\r\n"
                },
                {
                    "date": 1750510890267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n     def load_templates(self):\r\n         \"\"\"テンプレート画像をメモリに読み込み\"\"\"\r\n         template_files = {\r\n             'boss': 'boss.jpg',\r\n-            'play': 'play.png',\r\n+            'play': 'play_1.png',\r\n             'play_2': 'play_2.png',  # 追加\r\n             'puzzle': 'puzzle.png',\r\n             'waza_ok': 'waza_ok.png',\r\n             'next': 'next.png',\r\n"
                },
                {
                    "date": 1750510905325,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n     def load_templates(self):\r\n         \"\"\"テンプレート画像をメモリに読み込み\"\"\"\r\n         template_files = {\r\n             'boss': 'boss.jpg',\r\n-            'play': 'play_1.png',\r\n+            'play_1': 'play_1.png',\r\n             'play_2': 'play_2.png',  # 追加\r\n             'puzzle': 'puzzle.png',\r\n             'waza_ok': 'waza_ok.png',\r\n             'next': 'next.png',\r\n"
                },
                {
                    "date": 1750510945015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,8 +25,9 @@\n             'boss': 'boss.jpg',\r\n             'play_1': 'play_1.png',\r\n             'play_2': 'play_2.png',  # 追加\r\n             'puzzle': 'puzzle.png',\r\n+            'puzzle': 'puzzle.png',\r\n             'waza_ok': 'waza_ok.png',\r\n             'next': 'next.png',\r\n             'stage_45': 'stage_45.png',\r\n             'close': 'close.png',\r\n"
                },
                {
                    "date": 1750510950600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,10 +24,8 @@\n         template_files = {\r\n             'boss': 'boss.jpg',\r\n             'play_1': 'play_1.png',\r\n             'play_2': 'play_2.png',  # 追加\r\n-            'puzzle': 'puzzle.png',\r\n-            'puzzle': 'puzzle.png',\r\n             'waza_ok': 'waza_ok.png',\r\n             'next': 'next.png',\r\n             'stage_45': 'stage_45.png',\r\n             'close': 'close.png',\r\n"
                },
                {
                    "date": 1750510957347,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,10 @@\n         \"\"\"テンプレート画像をメモリに読み込み\"\"\"\r\n         template_files = {\r\n             'boss': 'boss.jpg',\r\n             'play_1': 'play_1.png',\r\n-            'play_2': 'play_2.png',  # 追加\r\n+            'play_2': 'play_2.png',\r\n+            \r\n             'waza_ok': 'waza_ok.png',\r\n             'next': 'next.png',\r\n             'stage_45': 'stage_45.png',\r\n             'close': 'close.png',\r\n"
                },
                {
                    "date": 1750510972355,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n         template_files = {\r\n             'boss': 'boss.jpg',\r\n             'play_1': 'play_1.png',\r\n             'play_2': 'play_2.png',\r\n-            \r\n+            'puni_1'\r\n             'waza_ok': 'waza_ok.png',\r\n             'next': 'next.png',\r\n             'stage_45': 'stage_45.png',\r\n             'close': 'close.png',\r\n"
                },
                {
                    "date": 1750510984410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n         template_files = {\r\n             'boss': 'boss.jpg',\r\n             'play_1': 'play_1.png',\r\n             'play_2': 'play_2.png',\r\n-            'puni_1'\r\n+            'puni_1': 'puni_1'\r\n             'waza_ok': 'waza_ok.png',\r\n             'next': 'next.png',\r\n             'stage_45': 'stage_45.png',\r\n             'close': 'close.png',\r\n"
                },
                {
                    "date": 1750510993820,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,10 @@\n         template_files = {\r\n             'boss': 'boss.jpg',\r\n             'play_1': 'play_1.png',\r\n             'play_2': 'play_2.png',\r\n-            'puni_1': 'puni_1'\r\n+            'puni_1': 'puni_1',\r\n+            'puni_1': 'puni_1',\r\n             'waza_ok': 'waza_ok.png',\r\n             'next': 'next.png',\r\n             'stage_45': 'stage_45.png',\r\n             'close': 'close.png',\r\n"
                },
                {
                    "date": 1750511012422,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,10 +25,10 @@\n             'boss': 'boss.jpg',\r\n             'play_1': 'play_1.png',\r\n             'play_2': 'play_2.png',\r\n             'puni_1': 'puni_1',\r\n-            'puni_1': 'puni_1',\r\n-            'waza_ok': 'waza_ok.png',\r\n+            'puni_2': 'puni_2',\r\n+            'waza_ok_1': 'waza_ok.png',\r\n             'next': 'next.png',\r\n             'stage_45': 'stage_45.png',\r\n             'close': 'close.png',\r\n             'close_mini': 'close_mini.png'\r\n"
                },
                {
                    "date": 1750511020715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,10 @@\n             'play_1': 'play_1.png',\r\n             'play_2': 'play_2.png',\r\n             'puni_1': 'puni_1',\r\n             'puni_2': 'puni_2',\r\n-            'waza_ok_1': 'waza_ok.png',\r\n+            'waza_ok_1': 'waza_ok_1.png',\r\n+            'waza_ok_1': 'waza_ok_1.png',\r\n             'next': 'next.png',\r\n             'stage_45': 'stage_45.png',\r\n             'close': 'close.png',\r\n             'close_mini': 'close_mini.png'\r\n"
                },
                {
                    "date": 1750511142273,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,14 +22,15 @@\n     def load_templates(self):\r\n         \"\"\"テンプレート画像をメモリに読み込み\"\"\"\r\n         template_files = {\r\n             'boss': 'boss.jpg',\r\n+            \r\n             'play_1': 'play_1.png',\r\n             'play_2': 'play_2.png',\r\n             'puni_1': 'puni_1',\r\n             'puni_2': 'puni_2',\r\n             'waza_ok_1': 'waza_ok_1.png',\r\n-            'waza_ok_1': 'waza_ok_1.png',\r\n+            'waza_ok_2': 'waza_ok_2.png',\r\n             'next': 'next.png',\r\n             'stage_45': 'stage_45.png',\r\n             'close': 'close.png',\r\n             'close_mini': 'close_mini.png'\r\n"
                },
                {
                    "date": 1750511149462,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n     def load_templates(self):\r\n         \"\"\"テンプレート画像をメモリに読み込み\"\"\"\r\n         template_files = {\r\n             'boss': 'boss.jpg',\r\n-            \r\n+            'ura_boss'\r\n             'play_1': 'play_1.png',\r\n             'play_2': 'play_2.png',\r\n             'puni_1': 'puni_1',\r\n             'puni_2': 'puni_2',\r\n"
                },
                {
                    "date": 1750511155579,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n     def load_templates(self):\r\n         \"\"\"テンプレート画像をメモリに読み込み\"\"\"\r\n         template_files = {\r\n             'boss': 'boss.jpg',\r\n-            'ura_boss'\r\n+            'ura_boss': 'ura?'\r\n             'play_1': 'play_1.png',\r\n             'play_2': 'play_2.png',\r\n             'puni_1': 'puni_1',\r\n             'puni_2': 'puni_2',\r\n"
                },
                {
                    "date": 1750511162228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n     def load_templates(self):\r\n         \"\"\"テンプレート画像をメモリに読み込み\"\"\"\r\n         template_files = {\r\n             'boss': 'boss.jpg',\r\n-            'ura_boss': 'ura?'\r\n+            'ura_boss': 'ura_boss.png'\r\n             'play_1': 'play_1.png',\r\n             'play_2': 'play_2.png',\r\n             'puni_1': 'puni_1',\r\n             'puni_2': 'puni_2',\r\n"
                },
                {
                    "date": 1750511200044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,10 +21,10 @@\n         \r\n     def load_templates(self):\r\n         \"\"\"テンプレート画像をメモリに読み込み\"\"\"\r\n         template_files = {\r\n-            'boss': 'boss.jpg',\r\n-            'ura_boss': 'ura_boss.png'\r\n+            'boss': 'boss.png',\r\n+            'ura_boss': 'ura_boss.png',\r\n             'play_1': 'play_1.png',\r\n             'play_2': 'play_2.png',\r\n             'puni_1': 'puni_1',\r\n             'puni_2': 'puni_2',\r\n"
                },
                {
                    "date": 1750511207785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,10 +25,10 @@\n             'boss': 'boss.png',\r\n             'ura_boss': 'ura_boss.png',\r\n             'play_1': 'play_1.png',\r\n             'play_2': 'play_2.png',\r\n-            'puni_1': 'puni_1',\r\n-            'puni_2': 'puni_2',\r\n+            'puni_1': 'puni_1.png',\r\n+            'puni_2': 'puni_2.png',\r\n             'waza_ok_1': 'waza_ok_1.png',\r\n             'waza_ok_2': 'waza_ok_2.png',\r\n             'next': 'next.png',\r\n             'stage_45': 'stage_45.png',\r\n"
                },
                {
                    "date": 1750511801193,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,8 @@\n             'stage_45': 'stage_45.png',\r\n             'close': 'close.png',\r\n             'close_mini': 'close_mini.png'\r\n         }\r\n-        \r\n         for name, filename in template_files.items():\r\n             filepath = os.path.join(self.template_dir, filename)\r\n             if os.path.exists(filepath):\r\n                 template = cv2.imread(filepath, cv2.IMREAD_COLOR)\r\n@@ -103,24 +102,26 @@\n         center_y = (y1 + y2) // 2\r\n         return center_x, center_y\r\n     \r\n     async def detect_all_templates_async(self, screen_bytes: bytes, \r\n-                                       threshold: float = 0.8) -> Dict[str, Optional[Tuple[int, int]]]:\r\n-        \"\"\"全テンプレートを非同期で検索\"\"\"\r\n+                                       threshold: float = 0.8, \r\n+                                       per_image_thresholds: Optional[Dict[str, float]] = None) -> Dict[str, Optional[Tuple[int, int]]]:\r\n+        \"\"\"全テンプレートを非同期で検索（画像ごとに閾値指定可）\"\"\"\r\n         screen_img = self.bytes_to_cv2(screen_bytes)\r\n         if screen_img is None:\r\n             return {name: None for name in self.templates.keys()}\r\n         \r\n         loop = asyncio.get_event_loop()\r\n         tasks = []\r\n         \r\n         for template_name in self.templates.keys():\r\n+            t = per_image_thresholds.get(template_name, threshold) if per_image_thresholds else threshold\r\n             task = loop.run_in_executor(\r\n                 self.executor, \r\n                 self.find_template, \r\n                 screen_img, \r\n                 template_name, \r\n-                threshold\r\n+                t\r\n             )\r\n             tasks.append((template_name, task))\r\n         \r\n         results = {}\r\n@@ -190,15 +191,16 @@\n         self.detector = ImageDetector(template_dir)\r\n         self.logger = logging.getLogger(__name__)\r\n         \r\n     async def detect_all_devices(self, screen_data_dict: Dict[str, bytes],\r\n-                               threshold: float = 0.8) -> Dict[str, Dict[str, Optional[Tuple[int, int]]]]:\r\n-        \"\"\"全デバイスで全テンプレートを検索\"\"\"\r\n+                               threshold: float = 0.8,\r\n+                               per_image_thresholds: Optional[Dict[str, float]] = None) -> Dict[str, Dict[str, Optional[Tuple[int, int]]]]:\r\n+        \"\"\"全デバイスで全テンプレートを検索（画像ごとに閾値指定可）\"\"\"\r\n         tasks = []\r\n         \r\n         for device_id, screen_bytes in screen_data_dict.items():\r\n             if screen_bytes:\r\n-                task = self.detector.detect_all_templates_async(screen_bytes, threshold)\r\n+                task = self.detector.detect_all_templates_async(screen_bytes, threshold, per_image_thresholds)\r\n                 tasks.append((device_id, task))\r\n         \r\n         results = {}\r\n         for device_id, task in tasks:\r\n"
                },
                {
                    "date": 1750512636069,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,10 @@\n             'waza_ok_2': 'waza_ok_2.png',\r\n             'next': 'next.png',\r\n             'stage_45': 'stage_45.png',\r\n             'close': 'close.png',\r\n-            'close_mini': 'close_mini.png'\r\n+            'close_mini': 'close_mini.png',\r\n+            'hp_bar': 'hp_bar.png'  # 追加\r\n         }\r\n         for name, filename in template_files.items():\r\n             filepath = os.path.join(self.template_dir, filename)\r\n             if os.path.exists(filepath):\r\n"
                },
                {
                    "date": 1750512865286,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,10 +32,9 @@\n             'waza_ok_2': 'waza_ok_2.png',\r\n             'next': 'next.png',\r\n             'stage_45': 'stage_45.png',\r\n             'close': 'close.png',\r\n-            'close_mini': 'close_mini.png',\r\n-            'hp_bar': 'hp_bar.png'  # 追加\r\n+            'close_mini': 'close_mini.png'\r\n         }\r\n         for name, filename in template_files.items():\r\n             filepath = os.path.join(self.template_dir, filename)\r\n             if os.path.exists(filepath):\r\n"
                },
                {
                    "date": 1750513169126,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,10 @@\n             'waza_ok_2': 'waza_ok_2.png',\r\n             'next': 'next.png',\r\n             'stage_45': 'stage_45.png',\r\n             'close': 'close.png',\r\n-            'close_mini': 'close_mini.png'\r\n+            'close_mini': 'close_mini.png',\r\n+            'hp_bar': 'hp_bar.png'  # 追加\r\n         }\r\n         for name, filename in template_files.items():\r\n             filepath = os.path.join(self.template_dir, filename)\r\n             if os.path.exists(filepath):\r\n"
                },
                {
                    "date": 1750513814311,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n     def __init__(self, template_dir: str = \"image\"):\r\n         self.template_dir = template_dir\r\n         self.templates = {}\r\n         self.logger = logging.getLogger(__name__)\r\n-        self.executor = ThreadPoolExecutor(max_workers=16)  # 高速化のためスレッド数増加\r\n+        self.executor = ThreadPoolExecutor(max_workers=32)  # 高速化のためスレッド数さらに増加\r\n         self.load_templates()\r\n         \r\n     def load_templates(self):\r\n         \"\"\"テンプレート画像をメモリに読み込み\"\"\"\r\n"
                },
                {
                    "date": 1750517160767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,215 +1,148 @@\n import cv2\r\n import numpy as np\r\n-from typing import List, Tuple, Optional, Dict\r\n-import logging\r\n import os\r\n-from concurrent.futures import ThreadPoolExecutor\r\n-import asyncio\r\n-from io import BytesIO\r\n-from PIL import Image\r\n \r\n-\r\n class ImageDetector:\r\n-    \"\"\"OpenCV2を使用した画像認識クラス\"\"\"\r\n-    \r\n-    def __init__(self, template_dir: str = \"image\"):\r\n-        self.template_dir = template_dir\r\n-        self.templates = {}\r\n-        self.logger = logging.getLogger(__name__)\r\n-        self.executor = ThreadPoolExecutor(max_workers=32)  # 高速化のためスレッド数さらに増加\r\n-        self.load_templates()\r\n+    def __init__(self):\r\n+        self.threshold = 0.8\r\n+        self.template_cache = {}\r\n         \r\n-    def load_templates(self):\r\n-        \"\"\"テンプレート画像をメモリに読み込み\"\"\"\r\n-        template_files = {\r\n-            'boss': 'boss.png',\r\n-            'ura_boss': 'ura_boss.png',\r\n-            'play_1': 'play_1.png',\r\n-            'play_2': 'play_2.png',\r\n-            'puni_1': 'puni_1.png',\r\n-            'puni_2': 'puni_2.png',\r\n-            'waza_ok_1': 'waza_ok_1.png',\r\n-            'waza_ok_2': 'waza_ok_2.png',\r\n-            'next': 'next.png',\r\n-            'stage_45': 'stage_45.png',\r\n-            'close': 'close.png',\r\n-            'close_mini': 'close_mini.png',\r\n-            'hp_bar': 'hp_bar.png'  # 追加\r\n-        }\r\n-        for name, filename in template_files.items():\r\n-            filepath = os.path.join(self.template_dir, filename)\r\n-            if os.path.exists(filepath):\r\n-                template = cv2.imread(filepath, cv2.IMREAD_COLOR)\r\n-                if template is not None:\r\n-                    self.templates[name] = template\r\n-                    self.logger.info(f\"テンプレート '{name}' を読み込みました\")\r\n-                else:\r\n-                    self.logger.warning(f\"テンプレート '{name}' の読み込みに失敗しました\")\r\n-            else:\r\n-                self.logger.warning(f\"テンプレートファイル '{filepath}' が見つかりません\")\r\n-    \r\n-    def bytes_to_cv2(self, image_bytes: bytes) -> Optional[np.ndarray]:\r\n-        \"\"\"バイト列をOpenCV2の画像形式に変換\"\"\"\r\n-        try:\r\n-            if not image_bytes:\r\n-                return None\r\n+    def set_threshold(self, threshold):\r\n+        \"\"\"検出閾値の設定\"\"\"\r\n+        self.threshold = threshold\r\n+        \r\n+    def load_template(self, image_path):\r\n+        \"\"\"テンプレート画像の読み込み（キャッシュ付き）\"\"\"\r\n+        if image_path not in self.template_cache:\r\n+            if not os.path.exists(image_path):\r\n+                raise FileNotFoundError(f\"画像ファイルが見つかりません: {image_path}\")\r\n+                \r\n+            template = cv2.imread(image_path, cv2.IMREAD_COLOR)\r\n+            if template is None:\r\n+                raise ValueError(f\"画像の読み込みに失敗しました: {image_path}\")\r\n+                \r\n+            self.template_cache[image_path] = template\r\n             \r\n-            # PNG形式の場合のバイト修正（ADBのスクリーンショットの場合）\r\n-            if image_bytes.startswith(b'\\x89PNG'):\r\n-                # PNG形式そのまま\r\n-                nparr = np.frombuffer(image_bytes, np.uint8)\r\n-                img = cv2.imdecode(nparr, cv2.IMREAD_COLOR)\r\n-            else:\r\n-                # その他の形式\r\n-                nparr = np.frombuffer(image_bytes, np.uint8)\r\n-                img = cv2.imdecode(nparr, cv2.IMREAD_COLOR)\r\n-            \r\n-            return img\r\n-        except Exception as e:\r\n-            self.logger.error(f\"画像変換エラー: {e}\")\r\n-            return None\r\n-    \r\n-    def find_template(self, screen_img: np.ndarray, template_name: str, \r\n-                     threshold: float = 0.8) -> Optional[Tuple[int, int, int, int]]:\r\n-        \"\"\"テンプレートマッチングで画像を検索\"\"\"\r\n-        if template_name not in self.templates:\r\n-            self.logger.warning(f\"テンプレート '{template_name}' が見つかりません\")\r\n-            return None\r\n+        return self.template_cache[image_path]\r\n         \r\n-        template = self.templates[template_name]\r\n-        if screen_img is None or template is None:\r\n-            return None\r\n+    def detect_image(self, screenshot, template_path):\r\n+        \"\"\"\r\n+        スクリーンショット内でテンプレート画像を検出\r\n         \r\n+        Args:\r\n+            screenshot: スクリーンショット画像（numpy array）\r\n+            template_path: テンプレート画像のパス\r\n+            \r\n+        Returns:\r\n+            list: 検出された位置のリスト [(x, y), ...]\r\n+        \"\"\"\r\n         try:\r\n-            # テンプレートマッチング実行\r\n-            result = cv2.matchTemplate(screen_img, template, cv2.TM_CCOEFF_NORMED)\r\n-            min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)\r\n+            # テンプレート画像の読み込み\r\n+            template = self.load_template(template_path)\r\n             \r\n-            if max_val >= threshold:\r\n-                # マッチした位置とサイズを返す\r\n-                h, w = template.shape[:2]\r\n-                x, y = max_loc\r\n-                return (x, y, x + w, y + h)\r\n+            # スクリーンショットがNoneの場合\r\n+            if screenshot is None:\r\n+                return []\r\n+                \r\n+            # グレースケール変換\r\n+            screenshot_gray = cv2.cvtColor(screenshot, cv2.COLOR_BGR2GRAY)\r\n+            template_gray = cv2.cvtColor(template, cv2.COLOR_BGR2GRAY)\r\n             \r\n-            return None\r\n+            # テンプレートマッチング\r\n+            result = cv2.matchTemplate(screenshot_gray, template_gray, cv2.TM_CCOEFF_NORMED)\r\n+            \r\n+            # 閾値以上の位置を検出\r\n+            locations = np.where(result >= self.threshold)\r\n+            \r\n+            # 検出された位置をリストに変換\r\n+            positions = []\r\n+            template_h, template_w = template_gray.shape\r\n+            \r\n+            for pt in zip(*locations[::-1]):  # locationは(y, x)の順なので反転\r\n+                # テンプレートの中心座標を計算\r\n+                center_x = pt[0] + template_w // 2\r\n+                center_y = pt[1] + template_h // 2\r\n+                positions.append((center_x, center_y))\r\n+                \r\n+            # 重複する検出結果を除去\r\n+            positions = self.remove_duplicate_detections(positions, template_w, template_h)\r\n+            \r\n+            return positions\r\n+            \r\n         except Exception as e:\r\n-            self.logger.error(f\"テンプレートマッチングエラー ({template_name}): {e}\")\r\n-            return None\r\n-    \r\n-    def get_center_point(self, bbox: Tuple[int, int, int, int]) -> Tuple[int, int]:\r\n-        \"\"\"バウンディングボックスの中心座標を取得\"\"\"\r\n-        x1, y1, x2, y2 = bbox\r\n-        center_x = (x1 + x2) // 2\r\n-        center_y = (y1 + y2) // 2\r\n-        return center_x, center_y\r\n-    \r\n-    async def detect_all_templates_async(self, screen_bytes: bytes, \r\n-                                       threshold: float = 0.8, \r\n-                                       per_image_thresholds: Optional[Dict[str, float]] = None) -> Dict[str, Optional[Tuple[int, int]]]:\r\n-        \"\"\"全テンプレートを非同期で検索（画像ごとに閾値指定可）\"\"\"\r\n-        screen_img = self.bytes_to_cv2(screen_bytes)\r\n-        if screen_img is None:\r\n-            return {name: None for name in self.templates.keys()}\r\n+            print(f\"画像検出エラー: {str(e)}\")\r\n+            return []\r\n+            \r\n+    def remove_duplicate_detections(self, positions, template_w, template_h):\r\n+        \"\"\"\r\n+        重複する検出結果を除去\r\n         \r\n-        loop = asyncio.get_event_loop()\r\n-        tasks = []\r\n+        Args:\r\n+            positions: 検出された位置のリスト\r\n+            template_w: テンプレートの幅\r\n+            template_h: テンプレートの高さ\r\n+            \r\n+        Returns:\r\n+            list: 重複を除去した位置のリスト\r\n+        \"\"\"\r\n+        if not positions:\r\n+            return []\r\n+            \r\n+        # 距離の閾値（テンプレートサイズの半分）\r\n+        distance_threshold = max(template_w, template_h) // 2\r\n         \r\n-        for template_name in self.templates.keys():\r\n-            t = per_image_thresholds.get(template_name, threshold) if per_image_thresholds else threshold\r\n-            task = loop.run_in_executor(\r\n-                self.executor, \r\n-                self.find_template, \r\n-                screen_img, \r\n-                template_name, \r\n-                t\r\n-            )\r\n-            tasks.append((template_name, task))\r\n+        filtered_positions = []\r\n         \r\n-        results = {}\r\n-        for template_name, task in tasks:\r\n-            try:\r\n-                bbox = await task\r\n-                if bbox:\r\n-                    center = self.get_center_point(bbox)\r\n-                    results[template_name] = center\r\n-                else:\r\n-                    results[template_name] = None\r\n-            except Exception as e:\r\n-                self.logger.error(f\"テンプレート検索エラー ({template_name}): {e}\")\r\n-                results[template_name] = None\r\n+        for pos in positions:\r\n+            # 既存の位置と比較\r\n+            is_duplicate = False\r\n+            for existing_pos in filtered_positions:\r\n+                distance = np.sqrt((pos[0] - existing_pos[0])**2 + (pos[1] - existing_pos[1])**2)\r\n+                if distance < distance_threshold:\r\n+                    is_duplicate = True\r\n+                    break\r\n+                    \r\n+            if not is_duplicate:\r\n+                filtered_positions.append(pos)\r\n+                \r\n+        return filtered_positions\r\n         \r\n-        return results\r\n-    \r\n-    def detect_template_sync(self, screen_bytes: bytes, template_name: str,\r\n-                           threshold: float = 0.8) -> Optional[Tuple[int, int]]:\r\n-        \"\"\"同期的にテンプレートを検索\"\"\"\r\n-        screen_img = self.bytes_to_cv2(screen_bytes)\r\n-        if screen_img is None:\r\n-            return None\r\n+    def save_debug_image(self, screenshot, positions, template_path, output_path):\r\n+        \"\"\"\r\n+        デバッグ用：検出結果をマークした画像を保存\r\n         \r\n-        bbox = self.find_template(screen_img, template_name, threshold)\r\n-        if bbox:\r\n-            return self.get_center_point(bbox)\r\n-        return None\r\n-    \r\n-    def detect_multiple_templates(self, screen_bytes: bytes, template_names: List[str],\r\n-                                threshold: float = 0.8) -> Dict[str, Optional[Tuple[int, int]]]:\r\n-        \"\"\"複数のテンプレートを同期的に検索\"\"\"\r\n-        screen_img = self.bytes_to_cv2(screen_bytes)\r\n-        results = {}\r\n-        \r\n-        if screen_img is None:\r\n-            return {name: None for name in template_names}\r\n-        \r\n-        for template_name in template_names:\r\n-            bbox = self.find_template(screen_img, template_name, threshold)\r\n-            if bbox:\r\n-                results[template_name] = self.get_center_point(bbox)\r\n-            else:\r\n-                results[template_name] = None\r\n-        \r\n-        return results\r\n-    \r\n-    def update_template(self, template_name: str, template_path: str):\r\n-        \"\"\"テンプレートを更新\"\"\"\r\n-        if os.path.exists(template_path):\r\n-            template = cv2.imread(template_path, cv2.IMREAD_COLOR)\r\n-            if template is not None:\r\n-                self.templates[template_name] = template\r\n-                self.logger.info(f\"テンプレート '{template_name}' を更新しました\")\r\n-                return True\r\n-        return False\r\n-    \r\n-    def get_template_names(self) -> List[str]:\r\n-        \"\"\"読み込み済みテンプレート名一覧を取得\"\"\"\r\n-        return list(self.templates.keys())\r\n-\r\n-\r\n-class MultiDeviceImageDetector:\r\n-    \"\"\"複数デバイス用画像認識クラス\"\"\"\r\n-    \r\n-    def __init__(self, template_dir: str = \"image\"):\r\n-        self.detector = ImageDetector(template_dir)\r\n-        self.logger = logging.getLogger(__name__)\r\n-        \r\n-    async def detect_all_devices(self, screen_data_dict: Dict[str, bytes],\r\n-                               threshold: float = 0.8,\r\n-                               per_image_thresholds: Optional[Dict[str, float]] = None) -> Dict[str, Dict[str, Optional[Tuple[int, int]]]]:\r\n-        \"\"\"全デバイスで全テンプレートを検索（画像ごとに閾値指定可）\"\"\"\r\n-        tasks = []\r\n-        \r\n-        for device_id, screen_bytes in screen_data_dict.items():\r\n-            if screen_bytes:\r\n-                task = self.detector.detect_all_templates_async(screen_bytes, threshold, per_image_thresholds)\r\n-                tasks.append((device_id, task))\r\n-        \r\n-        results = {}\r\n-        for device_id, task in tasks:\r\n-            try:\r\n-                detection_result = await task\r\n-                results[device_id] = detection_result\r\n-            except Exception as e:\r\n-                self.logger.error(f\"デバイス {device_id} の検索エラー: {e}\")\r\n-                results[device_id] = {name: None for name in self.detector.get_template_names()}\r\n-        \r\n-        return results\r\n+        Args:\r\n+            screenshot: スクリーンショット画像\r\n+            positions: 検出された位置のリスト\r\n+            template_path: テンプレート画像のパス\r\n+            output_path: 出力画像のパス\r\n+        \"\"\"\r\n+        try:\r\n+            # テンプレートサイズの取得\r\n+            template = self.load_template(template_path)\r\n+            template_h, template_w = template.shape[:2]\r\n+            \r\n+            # スクリーンショットのコピー\r\n+            debug_image = screenshot.copy()\r\n+            \r\n+            # 検出された位置に矩形を描画\r\n+            for x, y in positions:\r\n+                # 矩形の座標計算\r\n+                top_left = (x - template_w // 2, y - template_h // 2)\r\n+                bottom_right = (x + template_w // 2, y + template_h // 2)\r\n+                \r\n+                # 矩形を描画\r\n+                cv2.rectangle(debug_image, top_left, bottom_right, (0, 255, 0), 2)\r\n+                \r\n+                # 中心点を描画\r\n+                cv2.circle(debug_image, (x, y), 5, (0, 0, 255), -1)\r\n+                \r\n+            # 画像を保存\r\n+            cv2.imwrite(output_path, debug_image)\r\n+            \r\n+        except Exception as e:\r\n+            print(f\"デバッグ画像保存エラー: {str(e)}\")\r\n+            \r\n+    def clear_cache(self):\r\n+        \"\"\"テンプレートキャッシュのクリア\"\"\"\r\n+        self.template_cache.clear()\r\n"
                }
            ],
            "date": 1750493481589,
            "name": "Commit-0",
            "content": "\"\"\"\r\n画像検出機能モジュール\r\n妖怪ウォッチぷにぷに自動周回ソフト用の画像認識・検出機能\r\n\"\"\"\r\n\r\nimport cv2\r\nimport numpy as np\r\nimport time\r\n\r\n\r\nclass ImageDetector:\r\n    def __init__(self, similarity_threshold=0.8):\r\n        self.similarity_threshold = similarity_threshold\r\n        \r\n    def find_image_on_screen_optimized(self, template_path, screenshot, threshold=None):\r\n        \"\"\"最適化された画像検索\"\"\"\r\n        if threshold is None:\r\n            threshold = self.similarity_threshold\r\n            \r\n        try:\r\n            template = cv2.imread(template_path)\r\n            if template is None:\r\n                return None\r\n            \r\n            # テンプレートマッチング（高速化）\r\n            result = cv2.matchTemplate(screenshot, template, cv2.TM_CCOEFF_NORMED)\r\n            min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)\r\n            \r\n            if max_val >= threshold:\r\n                h, w = template.shape[:2]\r\n                center_x = max_loc[0] + w // 2\r\n                center_y = max_loc[1] + h // 2\r\n                \r\n                return (center_x, center_y)\r\n            else:\r\n                return None\r\n                \r\n        except Exception as e:\r\n            print(f\"最適化画像検索エラー: {str(e)}\")\r\n            return None\r\n            \r\n    def find_multiple_images_on_screen_optimized(self, template_paths, screenshot, threshold=None):\r\n        \"\"\"最適化された複数画像同時検索\"\"\"\r\n        if threshold is None:\r\n            threshold = self.similarity_threshold\r\n            \r\n        try:\r\n            results = {}\r\n            for name, template_path in template_paths.items():\r\n                template = cv2.imread(template_path)\r\n                if template is None:\r\n                    continue\r\n                \r\n                # テンプレートマッチング（高速化）\r\n                result = cv2.matchTemplate(screenshot, template, cv2.TM_CCOEFF_NORMED)\r\n                min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)\r\n                \r\n                if max_val >= threshold:\r\n                    h, w = template.shape[:2]\r\n                    center_x = max_loc[0] + w // 2\r\n                    center_y = max_loc[1] + h // 2\r\n                    \r\n                    results[name] = {\r\n                        'pos': (center_x, center_y),\r\n                        'confidence': max_val\r\n                    }\r\n            \r\n            return results\r\n                \r\n        except Exception as e:\r\n            print(f\"最適化複数画像検索エラー: {str(e)}\")\r\n            return {}\r\n    \r\n    def find_image_with_multiple_thresholds(self, template_path, screenshot, initial_threshold=None):\r\n        \"\"\"複数の閾値で画像を検索（段階的に閾値を下げる）\"\"\"\r\n        if initial_threshold is None:\r\n            initial_threshold = self.similarity_threshold\r\n        \r\n        # 段階的に閾値を下げて検索\r\n        thresholds = [initial_threshold, initial_threshold - 0.1, initial_threshold - 0.2, 0.6]\r\n        \r\n        for threshold in thresholds:\r\n            if threshold < 0.5:  # 最低限の閾値\r\n                break\r\n                \r\n            result = self.find_image_on_screen_optimized(template_path, screenshot, threshold)\r\n            if result:\r\n                return result\r\n        \r\n        return None\r\n\r\n    def find_puzzle_with_enhanced_detection(self, puzzle_path, screenshot):\r\n        \"\"\"puzzle.png専用の超強化検知機能\"\"\"\r\n        template = cv2.imread(puzzle_path)\r\n        if template is None:\r\n            return None\r\n        \r\n        # 検出方法1: 段階的閾値検索\r\n        thresholds = [self.similarity_threshold, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3]\r\n        for i, threshold in enumerate(thresholds):\r\n            result = cv2.matchTemplate(screenshot, template, cv2.TM_CCOEFF_NORMED)\r\n            min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)\r\n            \r\n            if max_val >= threshold:\r\n                h, w = template.shape[:2]\r\n                center_x = max_loc[0] + w // 2\r\n                center_y = max_loc[1] + h // 2\r\n                return (center_x, center_y)\r\n        \r\n        # 検出方法2: 複数マッチング手法\r\n        matching_methods = [\r\n            cv2.TM_CCOEFF_NORMED,\r\n            cv2.TM_CCORR_NORMED,\r\n            cv2.TM_SQDIFF_NORMED\r\n        ]\r\n        \r\n        for method_idx, method in enumerate(matching_methods):\r\n            try:\r\n                result = cv2.matchTemplate(screenshot, template, method)\r\n                min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)\r\n                \r\n                # TM_SQDIFF_NORMEDの場合は最小値を使用\r\n                if method == cv2.TM_SQDIFF_NORMED:\r\n                    if min_val <= 0.4:  # 低い値が良いマッチ\r\n                        h, w = template.shape[:2]\r\n                        center_x = min_loc[0] + w // 2\r\n                        center_y = min_loc[1] + h // 2\r\n                        return (center_x, center_y)\r\n                else:\r\n                    if max_val >= 0.3:\r\n                        h, w = template.shape[:2]\r\n                        center_x = max_loc[0] + w // 2\r\n                        center_y = max_loc[1] + h // 2\r\n                        return (center_x, center_y)\r\n            except Exception as e:\r\n                continue\r\n        \r\n        # 検出方法3: スケール変換対応\r\n        scales = [1.0, 0.9, 1.1, 0.8, 1.2, 0.7, 1.3]\r\n        for scale in scales:\r\n            try:\r\n                if scale != 1.0:\r\n                    h, w = template.shape[:2]\r\n                    new_h, new_w = int(h * scale), int(w * scale)\r\n                    scaled_template = cv2.resize(template, (new_w, new_h))\r\n                else:\r\n                    scaled_template = template\r\n                \r\n                result = cv2.matchTemplate(screenshot, scaled_template, cv2.TM_CCOEFF_NORMED)\r\n                min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)\r\n                \r\n                if max_val >= 0.3:\r\n                    h, w = scaled_template.shape[:2]\r\n                    center_x = max_loc[0] + w // 2\r\n                    center_y = max_loc[1] + h // 2\r\n                    return (center_x, center_y)\r\n            except Exception as e:\r\n                continue\r\n        \r\n        # 検出方法4: グレースケール＋エッジ検出\r\n        try:\r\n            gray_screenshot = cv2.cvtColor(screenshot, cv2.COLOR_BGR2GRAY)\r\n            gray_template = cv2.cvtColor(template, cv2.COLOR_BGR2GRAY)\r\n            \r\n            # エッジ検出\r\n            screenshot_edges = cv2.Canny(gray_screenshot, 50, 150)\r\n            template_edges = cv2.Canny(gray_template, 50, 150)\r\n            \r\n            result = cv2.matchTemplate(screenshot_edges, template_edges, cv2.TM_CCOEFF_NORMED)\r\n            min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)\r\n            \r\n            if max_val >= 0.2:  # エッジ検出は閾値を下げる\r\n                h, w = template_edges.shape[:2]\r\n                center_x = max_loc[0] + w // 2\r\n                center_y = max_loc[1] + h // 2\r\n                return (center_x, center_y)\r\n        except Exception as e:\r\n            pass\r\n        \r\n        # 検出方法5: HSV色空間での検索\r\n        try:\r\n            hsv_screenshot = cv2.cvtColor(screenshot, cv2.COLOR_BGR2HSV)\r\n            hsv_template = cv2.cvtColor(template, cv2.COLOR_BGR2HSV)\r\n            \r\n            result = cv2.matchTemplate(hsv_screenshot, hsv_template, cv2.TM_CCOEFF_NORMED)\r\n            min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)\r\n            \r\n            if max_val >= 0.25:\r\n                h, w = hsv_template.shape[:2]\r\n                center_x = max_loc[0] + w // 2\r\n                center_y = max_loc[1] + h // 2\r\n                return (center_x, center_y)\r\n        except Exception as e:\r\n            pass\r\n        \r\n        # 検出方法6: 画像の明度調整\r\n        try:\r\n            # 明度を調整したバージョンで試行\r\n            brightness_adjustments = [1.2, 0.8, 1.5, 0.6]\r\n            for brightness in brightness_adjustments:\r\n                adjusted_screenshot = cv2.convertScaleAbs(screenshot, alpha=brightness, beta=0)\r\n                result = cv2.matchTemplate(adjusted_screenshot, template, cv2.TM_CCOEFF_NORMED)\r\n                min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)\r\n                \r\n                if max_val >= 0.3:\r\n                    h, w = template.shape[:2]\r\n                    center_x = max_loc[0] + w // 2\r\n                    center_y = max_loc[1] + h // 2\r\n                    return (center_x, center_y)\r\n        except Exception as e:\r\n            pass\r\n        \r\n        return None\r\n\r\n    def test_normal_matching(self, screenshot, template):\r\n        \"\"\"通常マッチングテスト\"\"\"\r\n        thresholds = [0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2]\r\n        for threshold in thresholds:\r\n            result = cv2.matchTemplate(screenshot, template, cv2.TM_CCOEFF_NORMED)\r\n            min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)\r\n            if max_val >= threshold:\r\n                h, w = template.shape[:2]\r\n                center_x, center_y = max_loc[0] + w // 2, max_loc[1] + h // 2\r\n                return f\"(閾値: {threshold:.1f}, 信頼度: {max_val:.3f}, 位置: ({center_x}, {center_y}))\"\r\n        return None\r\n    \r\n    def test_multiple_algorithms(self, screenshot, template):\r\n        \"\"\"複数アルゴリズムテスト\"\"\"\r\n        algorithms = [\r\n            (cv2.TM_CCOEFF_NORMED, \"CCOEFF_NORMED\"),\r\n            (cv2.TM_CCORR_NORMED, \"CCORR_NORMED\"),\r\n            (cv2.TM_SQDIFF_NORMED, \"SQDIFF_NORMED\")\r\n        ]\r\n        \r\n        for method, name in algorithms:\r\n            try:\r\n                result = cv2.matchTemplate(screenshot, template, method)\r\n                min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)\r\n                \r\n                if method == cv2.TM_SQDIFF_NORMED:\r\n                    if min_val <= 0.4:\r\n                        h, w = template.shape[:2]\r\n                        center_x, center_y = min_loc[0] + w // 2, min_loc[1] + h // 2\r\n                        return f\"({name}, 信頼度: {1-min_val:.3f}, 位置: ({center_x}, {center_y}))\"\r\n                else:\r\n                    if max_val >= 0.3:\r\n                        h, w = template.shape[:2]\r\n                        center_x, center_y = max_loc[0] + w // 2, max_loc[1] + h // 2\r\n                        return f\"({name}, 信頼度: {max_val:.3f}, 位置: ({center_x}, {center_y}))\"\r\n            except:\r\n                continue\r\n        return None\r\n    \r\n    def test_scale_matching(self, screenshot, template):\r\n        \"\"\"スケールマッチングテスト\"\"\"\r\n        scales = [1.0, 0.9, 1.1, 0.8, 1.2, 0.7, 1.3]\r\n        for scale in scales:\r\n            try:\r\n                h, w = template.shape[:2]\r\n                new_h, new_w = int(h * scale), int(w * scale)\r\n                if new_w > 0 and new_h > 0:\r\n                    scaled_template = cv2.resize(template, (new_w, new_h))\r\n                    result = cv2.matchTemplate(screenshot, scaled_template, cv2.TM_CCOEFF_NORMED)\r\n                    min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)\r\n                    if max_val >= 0.3:\r\n                        sh, sw = scaled_template.shape[:2]\r\n                        center_x, center_y = max_loc[0] + sw // 2, max_loc[1] + sh // 2\r\n                        return f\"(スケール: {scale:.1f}, 信頼度: {max_val:.3f}, 位置: ({center_x}, {center_y}))\"\r\n            except:\r\n                continue\r\n        return None\r\n    \r\n    def test_edge_matching(self, screenshot, template):\r\n        \"\"\"エッジマッチングテスト\"\"\"\r\n        try:\r\n            gray_screenshot = cv2.cvtColor(screenshot, cv2.COLOR_BGR2GRAY)\r\n            gray_template = cv2.cvtColor(template, cv2.COLOR_BGR2GRAY)\r\n            \r\n            screenshot_edges = cv2.Canny(gray_screenshot, 50, 150)\r\n            template_edges = cv2.Canny(gray_template, 50, 150)\r\n            \r\n            result = cv2.matchTemplate(screenshot_edges, template_edges, cv2.TM_CCOEFF_NORMED)\r\n            min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)\r\n            \r\n            if max_val >= 0.2:\r\n                h, w = template_edges.shape[:2]\r\n                center_x, center_y = max_loc[0] + w // 2, max_loc[1] + h // 2\r\n                return f\"(エッジ検出, 信頼度: {max_val:.3f}, 位置: ({center_x}, {center_y}))\"\r\n        except:\r\n            pass\r\n        return None\r\n    \r\n    def test_hsv_matching(self, screenshot, template):\r\n        \"\"\"HSVマッチングテスト\"\"\"\r\n        try:\r\n            hsv_screenshot = cv2.cvtColor(screenshot, cv2.COLOR_BGR2HSV)\r\n            hsv_template = cv2.cvtColor(template, cv2.COLOR_BGR2HSV)\r\n            \r\n            result = cv2.matchTemplate(hsv_screenshot, hsv_template, cv2.TM_CCOEFF_NORMED)\r\n            min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)\r\n            \r\n            if max_val >= 0.25:\r\n                h, w = hsv_template.shape[:2]\r\n                center_x, center_y = max_loc[0] + w // 2, max_loc[1] + h // 2\r\n                return f\"(HSV色空間, 信頼度: {max_val:.3f}, 位置: ({center_x}, {center_y}))\"\r\n        except:\r\n            pass\r\n        return None\r\n    \r\n    def test_brightness_matching(self, screenshot, template):\r\n        \"\"\"明度調整マッチングテスト\"\"\"\r\n        brightness_values = [1.2, 0.8, 1.5, 0.6, 1.8, 0.4]\r\n        for brightness in brightness_values:\r\n            try:\r\n                adjusted_screenshot = cv2.convertScaleAbs(screenshot, alpha=brightness, beta=0)\r\n                result = cv2.matchTemplate(adjusted_screenshot, template, cv2.TM_CCOEFF_NORMED)\r\n                min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)\r\n                \r\n                if max_val >= 0.3:\r\n                    h, w = template.shape[:2]\r\n                    center_x, center_y = max_loc[0] + w // 2, max_loc[1] + h // 2\r\n                    return f\"(明度: {brightness:.1f}, 信頼度: {max_val:.3f}, 位置: ({center_x}, {center_y}))\"\r\n            except:\r\n                continue\r\n        return None\r\n"
        }
    ]
}