{
    "sourceFile": "MacOS/main.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750520292704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750520292704,
            "name": "Commit-0",
            "content": "import tkinter as tk\r\nfrom tkinter import ttk, scrolledtext, messagebox, filedialog\r\nimport threading\r\nimport time\r\nimport os\r\nimport shutil\r\nfrom automation_engine import AutomationEngine\r\nfrom config_manager import ConfigManager\r\n\r\nclass PuniPuniAutoPlay:\r\n    def __init__(self):\r\n        self.root = tk.Tk()\r\n        self.root.title(\"妖怪ウォッチぷにぷに オトクリ補助ツール for MacOS\")\r\n        self.root.geometry(\"500x900\")\r\n        self.root.resizable(True, True)\r\n        self.config_manager = ConfigManager()\r\n        self.automation_engine = AutomationEngine(self.config_manager)\r\n        self.is_running = False\r\n        self.automation_thread = None\r\n        self.setup_ui()\r\n        self.setup_callbacks()\r\n\r\n    def setup_ui(self):\r\n        main_frame = ttk.Frame(self.root, padding=\"10\")\r\n        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))\r\n        title_label = ttk.Label(main_frame, text=\"オトクリ補助ツール for MacOS\", font=(\"Arial\", 16, \"bold\"))\r\n        title_label.grid(row=0, column=0, columnspan=2, pady=(0, 20))\r\n        device_frame = ttk.LabelFrame(main_frame, text=\"デバイス設定\", padding=\"10\")\r\n        device_frame.grid(row=1, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))\r\n        ttk.Label(device_frame, text=\"デバイス:\").grid(row=0, column=0, sticky=tk.W)\r\n        self.device_var = tk.StringVar()\r\n        self.device_combo = ttk.Combobox(device_frame, textvariable=self.device_var, width=30, state=\"readonly\")\r\n        self.device_combo.grid(row=0, column=1, padx=(10, 0), sticky=(tk.W, tk.E))\r\n        self.refresh_btn = ttk.Button(device_frame, text=\"デバイス更新\", command=self.refresh_devices)\r\n        self.refresh_btn.grid(row=0, column=2, padx=(10, 0))\r\n        automation_frame = ttk.LabelFrame(main_frame, text=\"自動化設定\", padding=\"10\")\r\n        automation_frame.grid(row=2, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))\r\n        ttk.Label(automation_frame, text=\"タップ間隔 (秒):\").grid(row=0, column=0, sticky=tk.W)\r\n        self.tap_interval_var = tk.DoubleVar(value=0.5)\r\n        tap_interval_spin = ttk.Spinbox(automation_frame, from_=0.1, to=5.0, increment=0.1, textvariable=self.tap_interval_var, width=10)\r\n        tap_interval_spin.grid(row=0, column=1, padx=(10, 0), sticky=tk.W)\r\n        ttk.Label(automation_frame, text=\"検出精度:\").grid(row=1, column=0, sticky=tk.W, pady=(10, 0))\r\n        self.detection_threshold_var = tk.DoubleVar(value=0.8)\r\n        threshold_scale = ttk.Scale(automation_frame, from_=0.5, to=1.0, variable=self.detection_threshold_var, orient=tk.HORIZONTAL, length=200)\r\n        threshold_scale.grid(row=1, column=1, padx=(10, 0), sticky=(tk.W, tk.E), pady=(10, 0))\r\n        self.threshold_label = ttk.Label(automation_frame, text=\"0.80\")\r\n        self.threshold_label.grid(row=1, column=2, padx=(10, 0), pady=(10, 0))\r\n        prevent_frame = ttk.LabelFrame(main_frame, text=\"誤タップ防止\", padding=\"10\")\r\n        prevent_frame.grid(row=3, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))\r\n        self.prevent_goukan_var = tk.BooleanVar(value=True)\r\n        self.prevent_yuubin_var = tk.BooleanVar(value=True)\r\n        self.prevent_ranking_var = tk.BooleanVar(value=True)\r\n        self.prevent_menu_var = tk.BooleanVar(value=True)\r\n        ttk.Checkbutton(prevent_frame, text=\"ごうかんボタンをタップしない\", variable=self.prevent_goukan_var).grid(row=0, column=0, sticky=tk.W, pady=2)\r\n        ttk.Checkbutton(prevent_frame, text=\"ゆうびんボタンをタップしない\", variable=self.prevent_yuubin_var).grid(row=0, column=1, sticky=tk.W, pady=2, padx=(20, 0))\r\n        ttk.Checkbutton(prevent_frame, text=\"ランキングボタンをタップしない\", variable=self.prevent_ranking_var).grid(row=1, column=0, sticky=tk.W, pady=2)\r\n        ttk.Checkbutton(prevent_frame, text=\"メニューボタンをタップしない\", variable=self.prevent_menu_var).grid(row=1, column=1, sticky=tk.W, pady=2, padx=(20, 0))\r\n        image_frame = ttk.LabelFrame(main_frame, text=\"画像管理\", padding=\"10\")\r\n        image_frame.grid(row=4, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))\r\n        ttk.Label(image_frame, text=\"新しい画像を追加:\").grid(row=0, column=0, sticky=tk.W, pady=(0, 5))\r\n        tap_frame = ttk.Frame(image_frame)\r\n        tap_frame.grid(row=1, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=5)\r\n        ttk.Label(tap_frame, text=\"タップする画像:\").pack(side=tk.LEFT)\r\n        self.add_tap_btn = ttk.Button(tap_frame, text=\"画像選択\", command=self.add_tap_image)\r\n        self.add_tap_btn.pack(side=tk.LEFT, padx=(10, 0))\r\n        ignore_frame = ttk.Frame(image_frame)\r\n        ignore_frame.grid(row=2, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=5)\r\n        ttk.Label(ignore_frame, text=\"タップしない画像:\").pack(side=tk.LEFT)\r\n        self.add_ignore_btn = ttk.Button(ignore_frame, text=\"画像選択\", command=self.add_ignore_image)\r\n        self.add_ignore_btn.pack(side=tk.LEFT, padx=(10, 0))\r\n        ttk.Label(image_frame, text=\"現在の画像一覧:\").grid(row=3, column=0, sticky=tk.W, pady=(15, 5))\r\n        list_frame = ttk.Frame(image_frame)\r\n        list_frame.grid(row=4, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=5)\r\n        self.image_listbox = tk.Listbox(list_frame, height=6, width=50)\r\n        self.image_listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)\r\n        scrollbar = ttk.Scrollbar(list_frame, orient=tk.VERTICAL, command=self.image_listbox.yview)\r\n        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)\r\n        self.image_listbox.config(yscrollcommand=scrollbar.set)\r\n        self.remove_image_btn = ttk.Button(image_frame, text=\"選択した画像を削除\", command=self.remove_image)\r\n        self.remove_image_btn.grid(row=5, column=0, columnspan=2, pady=(10, 0))\r\n        control_frame = ttk.Frame(main_frame)\r\n        control_frame.grid(row=5, column=0, columnspan=2, pady=(0, 10))\r\n        self.start_stop_btn = ttk.Button(control_frame, text=\"自動化開始\", command=self.toggle_automation)\r\n        self.start_stop_btn.pack(side=tk.LEFT, padx=(0, 10))\r\n        self.test_btn = ttk.Button(control_frame, text=\"画像検出テスト\", command=self.test_detection)\r\n        self.test_btn.pack(side=tk.LEFT)\r\n        log_frame = ttk.LabelFrame(main_frame, text=\"ログ\", padding=\"10\")\r\n        log_frame.grid(row=6, column=0, columnspan=2, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 10))\r\n        self.log_text = scrolledtext.ScrolledText(log_frame, height=10, width=70)\r\n        self.log_text.pack(fill=tk.BOTH, expand=True)\r\n        self.status_var = tk.StringVar(value=\"準備完了\")\r\n        status_bar = ttk.Label(main_frame, textvariable=self.status_var, relief=tk.SUNKEN, anchor=tk.W)\r\n        status_bar.grid(row=7, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(10, 0))\r\n        main_frame.columnconfigure(1, weight=1)\r\n        self.root.columnconfigure(0, weight=1)\r\n        self.root.rowconfigure(0, weight=1)\r\n        main_frame.rowconfigure(6, weight=1)\r\n        device_frame.columnconfigure(1, weight=1)\r\n        automation_frame.columnconfigure(1, weight=1)\r\n        self.load_ui_settings()\r\n\r\n    def load_ui_settings(self):\r\n        config = self.config_manager.get_config()\r\n        self.prevent_goukan_var.set(config.get('prevent_goukan', True))\r\n        self.prevent_yuubin_var.set(config.get('prevent_yuubin', True))\r\n        self.prevent_ranking_var.set(config.get('prevent_ranking', True))\r\n        self.prevent_menu_var.set(config.get('prevent_menu', True))\r\n        self.tap_interval_var.set(config.get('tap_interval', 0.5))\r\n        self.detection_threshold_var.set(config.get('detection_threshold', 0.8))\r\n\r\n    def setup_callbacks(self):\r\n        self.detection_threshold_var.trace('w', self.update_threshold_label)\r\n        self.automation_engine.set_log_callback(self.log_message)\r\n        self.update_image_list()\r\n\r\n    def update_threshold_label(self, *args):\r\n        value = self.detection_threshold_var.get()\r\n        self.threshold_label.config(text=f\"{value:.2f}\")\r\n\r\n    def refresh_devices(self):\r\n        self.log_message(\"デバイスを検索中...\")\r\n        self.status_var.set(\"デバイス検索中...\")\r\n        def search_devices():\r\n            devices = self.automation_engine.get_available_devices()\r\n            self.root.after(0, self.update_device_list, devices)\r\n        threading.Thread(target=search_devices, daemon=True).start()\r\n\r\n    def update_device_list(self, devices):\r\n        self.device_combo['values'] = devices\r\n        if devices:\r\n            self.device_combo.current(0)\r\n            self.log_message(f\"デバイスが見つかりました: {len(devices)}台\")\r\n            self.status_var.set(\"デバイス検出完了\")\r\n        else:\r\n            self.log_message(\"デバイスが見つかりませんでした\")\r\n            self.status_var.set(\"デバイスが見つかりません\")\r\n\r\n    def toggle_automation(self):\r\n        if not self.is_running:\r\n            self.start_automation()\r\n        else:\r\n            self.stop_automation()\r\n\r\n    def start_automation(self):\r\n        device = self.device_var.get()\r\n        if not device:\r\n            messagebox.showerror(\"エラー\", \"デバイスを選択してください\")\r\n            return\r\n        self.config_manager.set_config({\r\n            'device': device,\r\n            'tap_interval': self.tap_interval_var.get(),\r\n            'detection_threshold': self.detection_threshold_var.get(),\r\n            'prevent_goukan': self.prevent_goukan_var.get(),\r\n            'prevent_yuubin': self.prevent_yuubin_var.get(),\r\n            'prevent_ranking': self.prevent_ranking_var.get(),\r\n            'prevent_menu': self.prevent_menu_var.get()\r\n        })\r\n        self.is_running = True\r\n        self.start_stop_btn.config(text=\"自動化停止\", style=\"Accent.TButton\")\r\n        self.status_var.set(\"自動化実行中...\")\r\n        self.automation_thread = threading.Thread(target=self.run_automation, daemon=True)\r\n        self.automation_thread.start()\r\n        self.log_message(\"自動化を開始しました\")\r\n\r\n    def stop_automation(self):\r\n        self.is_running = False\r\n        self.automation_engine.stop()\r\n        self.start_stop_btn.config(text=\"自動化開始\", style=\"\")\r\n        self.status_var.set(\"自動化停止\")\r\n        self.log_message(\"自動化を停止しました\")\r\n\r\n    def run_automation(self):\r\n        try:\r\n            self.automation_engine.start()\r\n            while self.is_running:\r\n                if not self.automation_engine.process_frame():\r\n                    time.sleep(0.1)\r\n        except Exception as e:\r\n            self.root.after(0, lambda: self.log_message(f\"エラー: {str(e)}\"))\r\n            self.root.after(0, self.stop_automation)\r\n\r\n    def test_detection(self):\r\n        device = self.device_var.get()\r\n        if not device:\r\n            messagebox.showerror(\"エラー\", \"デバイスを選択してください\")\r\n            return\r\n        self.log_message(\"画像検出テストを実行しています...\")\r\n        def run_test():\r\n            try:\r\n                self.config_manager.set_config({\r\n                    'device': device,\r\n                    'detection_threshold': self.detection_threshold_var.get(),\r\n                    'prevent_goukan': self.prevent_goukan_var.get(),\r\n                    'prevent_yuubin': self.prevent_yuubin_var.get(),\r\n                    'prevent_ranking': self.prevent_ranking_var.get(),\r\n                    'prevent_menu': self.prevent_menu_var.get()\r\n                })\r\n                results = self.automation_engine.test_image_detection()\r\n                self.root.after(0, lambda: self.show_test_results(results))\r\n            except Exception as e:\r\n                self.root.after(0, lambda: self.log_message(f\"テストエラー: {str(e)}\"))\r\n        threading.Thread(target=run_test, daemon=True).start()\r\n\r\n    def show_test_results(self, results):\r\n        message = \"画像検出テスト結果:\\n\\n\"\r\n        for image_name, detected in results.items():\r\n            status = \"検出\" if detected else \"未検出\"\r\n            message += f\"{image_name}: {status}\\n\"\r\n        messagebox.showinfo(\"テスト結果\", message)\r\n        self.log_message(\"画像検出テストが完了しました\")\r\n\r\n    def log_message(self, message):\r\n        timestamp = time.strftime(\"%H:%M:%S\")\r\n        log_entry = f\"[{timestamp}] {message}\\n\"\r\n        self.log_text.insert(tk.END, log_entry)\r\n        self.log_text.see(tk.END)\r\n\r\n    def update_image_list(self):\r\n        self.image_listbox.delete(0, tk.END)\r\n        image_dir = \"image\"\r\n        if not os.path.exists(image_dir):\r\n            os.makedirs(image_dir)\r\n            return\r\n        tap_images = []\r\n        ignore_images = []\r\n        config = self.config_manager.get_config()\r\n        prevent_images = []\r\n        if config.get('prevent_goukan', True):\r\n            prevent_images.append('koukan.png')\r\n        if config.get('prevent_yuubin', True):\r\n            prevent_images.append('yubin.png')\r\n        if config.get('prevent_ranking', True):\r\n            prevent_images.append('ranking.png')\r\n        if config.get('prevent_menu', True):\r\n            prevent_images.append('menu.png')\r\n        for filename in os.listdir(image_dir):\r\n            if filename.lower().endswith(('.png', '.jpg', '.jpeg')):\r\n                if filename in prevent_images:\r\n                    ignore_images.append(filename)\r\n                else:\r\n                    tap_images.append(filename)\r\n        for img in sorted(tap_images):\r\n            self.image_listbox.insert(tk.END, f\"[タップする] {img}\")\r\n        for img in sorted(ignore_images):\r\n            self.image_listbox.insert(tk.END, f\"[タップしない] {img}\")\r\n\r\n    def add_tap_image(self):\r\n        file_path = filedialog.askopenfilename(\r\n            title=\"タップする画像を選択\",\r\n            filetypes=[\r\n                (\"画像ファイル\", \"*.png *.jpg *.jpeg\"),\r\n                (\"PNGファイル\", \"*.png\"),\r\n                (\"JPEGファイル\", \"*.jpg *.jpeg\"),\r\n                (\"すべてのファイル\", \"*.*\")\r\n            ]\r\n        )\r\n        if file_path:\r\n            self._add_image_file(file_path, is_tap_image=True)\r\n\r\n    def add_ignore_image(self):\r\n        file_path = filedialog.askopenfilename(\r\n            title=\"タップしない画像を選択\",\r\n            filetypes=[\r\n                (\"画像ファイル\", \"*.png *.jpg *.jpeg\"),\r\n                (\"PNGファイル\", \"*.png\"),\r\n                (\"JPEGファイル\", \"*.jpg *.jpeg\"),\r\n                (\"すべてのファイル\", \"*.*\")\r\n            ]\r\n        )\r\n        if file_path:\r\n            self._add_image_file(file_path, is_tap_image=False)\r\n\r\n    def _add_image_file(self, file_path, is_tap_image=True):\r\n        try:\r\n            filename = os.path.basename(file_path)\r\n            image_dir = \"image\"\r\n            if not os.path.exists(image_dir):\r\n                os.makedirs(image_dir)\r\n            destination = os.path.join(image_dir, filename)\r\n            if os.path.exists(destination):\r\n                result = messagebox.askyesno(\r\n                    \"ファイル上書き確認\",\r\n                    f\"'{filename}' は既に存在します。上書きしますか？\"\r\n                )\r\n                if not result:\r\n                    return\r\n            shutil.copy2(file_path, destination)\r\n            if not is_tap_image:\r\n                self.log_message(f\"タップしない画像として '{filename}' を追加しました\")\r\n            else:\r\n                self.log_message(f\"タップする画像として '{filename}' を追加しました\")\r\n            self.update_image_list()\r\n            self.automation_engine.reload_images()\r\n        except Exception as e:\r\n            messagebox.showerror(\"エラー\", f\"画像の追加に失敗しました:\\n{str(e)}\")\r\n            self.log_message(f\"画像追加エラー: {str(e)}\")\r\n\r\n    def remove_image(self):\r\n        selection = self.image_listbox.curselection()\r\n        if not selection:\r\n            messagebox.showwarning(\"警告\", \"削除する画像を選択してください\")\r\n            return\r\n        selected_text = self.image_listbox.get(selection[0])\r\n        if \"] \" in selected_text:\r\n            filename = selected_text.split(\"] \", 1)[1]\r\n        else:\r\n            filename = selected_text\r\n        result = messagebox.askyesno(\r\n            \"削除確認\",\r\n            f\"'{filename}' を削除しますか？\\nこの操作は元に戻せません。\"\r\n        )\r\n        if result:\r\n            try:\r\n                file_path = os.path.join(\"image\", filename)\r\n                if os.path.exists(file_path):\r\n                    os.remove(file_path)\r\n                    self.log_message(f\"画像 '{filename}' を削除しました\")\r\n                    self.update_image_list()\r\n                    self.automation_engine.reload_images()\r\n                else:\r\n                    messagebox.showerror(\"エラー\", f\"ファイルが見つかりません: {filename}\")\r\n            except Exception as e:\r\n                messagebox.showerror(\"エラー\", f\"画像の削除に失敗しました:\\n{str(e)}\")\r\n                self.log_message(f\"画像削除エラー: {str(e)}\")\r\n\r\n    def run(self):\r\n        self.root.after(100, self.refresh_devices)\r\n        self.root.mainloop()\r\n\r\nif __name__ == \"__main__\":\r\n    app = PuniPuniAutoPlay()\r\n    app.run()\r\n"
        }
    ]
}