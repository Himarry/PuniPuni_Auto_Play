{
    "sourceFile": "automation_engine_fixed.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750518120598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750518120598,
            "name": "Commit-0",
            "content": "import cv2\r\nimport numpy as np\r\nimport time\r\nimport threading\r\nfrom image_detector import ImageDetector\r\nfrom device_controller import DeviceController\r\n\r\nclass AutomationEngine:\r\n    def __init__(self, config_manager):\r\n        self.config_manager = config_manager\r\n        self.image_detector = ImageDetector()\r\n        self.device_controller = DeviceController()\r\n        \r\n        self.is_running = False\r\n        self.log_callback = None\r\n        \r\n        # 画像ファイルのパス\r\n        self.image_paths = {\r\n            'play_1': 'image/play_1.png',\r\n            'play_2': 'image/play_2.png',\r\n            'next': 'image/next.png',\r\n            'close': 'image/close.png',\r\n            'close_mini': 'image/close_mini.png',\r\n            'ok': 'image/ok.png'\r\n        }\r\n        \r\n        # タップしない画像（検出のみ行う）\r\n        self.ignore_images = {\r\n            'goukan': 'image/goukan.png',\r\n            'menu': 'image/menu.png',\r\n            'ranking': 'image/ranking.png',\r\n            'yuubin': 'image/yuubin.png'\r\n        }\r\n        \r\n        # 最後のタップ時間\r\n        self.last_tap_time = 0\r\n        \r\n    def set_log_callback(self, callback):\r\n        \"\"\"ログコールバックの設定\"\"\"\r\n        self.log_callback = callback\r\n        \r\n    def log(self, message):\r\n        \"\"\"ログメッセージの送信\"\"\"\r\n        if self.log_callback:\r\n            self.log_callback(message)\r\n            \r\n    def get_available_devices(self):\r\n        \"\"\"利用可能なデバイスの取得\"\"\"\r\n        return self.device_controller.get_devices()\r\n        \r\n    def start(self):\r\n        \"\"\"自動化の開始\"\"\"\r\n        self.is_running = True\r\n        \r\n        # デバイスの設定\r\n        config = self.config_manager.get_config()\r\n        device = config.get('device')\r\n        \r\n        if not device:\r\n            raise Exception(\"デバイスが選択されていません\")\r\n            \r\n        # デバイスコントローラーの初期化\r\n        self.device_controller.set_device(device)\r\n        \r\n        # 画像検出器の初期化\r\n        threshold = config.get('detection_threshold', 0.8)\r\n        self.image_detector.set_threshold(threshold)\r\n        \r\n        self.log(f\"自動化開始: デバイス {device}\")\r\n        \r\n    def stop(self):\r\n        \"\"\"自動化の停止\"\"\"\r\n        self.is_running = False\r\n        self.log(\"自動化停止\")\r\n        \r\n    def process_frame(self):\r\n        \"\"\"フレームの処理\"\"\"\r\n        if not self.is_running:\r\n            return False\r\n            \r\n        try:\r\n            # スクリーンショットの取得\r\n            screenshot = self.device_controller.get_screenshot()\r\n            if screenshot is None:\r\n                return False\r\n                \r\n            # タップしない画像が表示されているかチェック\r\n            ignore_detected = False\r\n            for ignore_name, ignore_path in self.ignore_images.items():\r\n                try:\r\n                    positions = self.image_detector.detect_image(screenshot, ignore_path)\r\n                    if positions:\r\n                        ignore_detected = True\r\n                        self.log(f\"{ignore_name} を検出（タップしません）\")\r\n                        break\r\n                except:\r\n                    # 画像ファイルが存在しない場合は無視\r\n                    pass\r\n            \r\n            # タップしない画像が検出された場合は何もしない\r\n            if ignore_detected:\r\n                return True\r\n                \r\n            # まずプレイボタンの検出を確認\r\n            play_detected = False\r\n            play_positions = []\r\n            \r\n            # プレイボタンの検出\r\n            for play_image in ['play_1', 'play_2']:\r\n                if play_image in self.image_paths:\r\n                    positions = self.image_detector.detect_image(screenshot, self.image_paths[play_image])\r\n                    if positions:\r\n                        play_detected = True\r\n                        play_positions.extend([(play_image, pos) for pos in positions])\r\n            \r\n            # 各画像の検出とタップ（優先順位付き）\r\n            detected_any = False\r\n            \r\n            # プレイボタンが検出された場合は、プレイボタンのみタップ\r\n            if play_detected:\r\n                current_time = time.time()\r\n                tap_interval = self.config_manager.get_config().get('tap_interval', 0.5)\r\n                \r\n                if current_time - self.last_tap_time >= tap_interval:\r\n                    # 最初に見つかったプレイボタンをタップ\r\n                    image_name, (x, y) = play_positions[0]\r\n                    self.device_controller.tap(x, y)\r\n                    self.last_tap_time = current_time\r\n                    \r\n                    self.log(f\"{image_name} を検出してタップ: ({x}, {y})\")\r\n                    detected_any = True\r\n                    \r\n            else:\r\n                # プレイボタンが検出されていない場合のみ、他のボタンを処理\r\n                for image_name, image_path in self.image_paths.items():\r\n                    # プレイボタンはすでに処理済みなのでスキップ\r\n                    if image_name in ['play_1', 'play_2']:\r\n                        continue\r\n                        \r\n                    positions = self.image_detector.detect_image(screenshot, image_path)\r\n                    \r\n                    if positions:\r\n                        detected_any = True\r\n                        \r\n                        # タップ間隔の確認\r\n                        current_time = time.time()\r\n                        tap_interval = self.config_manager.get_config().get('tap_interval', 0.5)\r\n                        \r\n                        if current_time - self.last_tap_time >= tap_interval:\r\n                            # 最初に見つかった位置をタップ\r\n                            x, y = positions[0]\r\n                            self.device_controller.tap(x, y)\r\n                            self.last_tap_time = current_time\r\n                            \r\n                            self.log(f\"{image_name} を検出してタップ: ({x}, {y})\")\r\n                            \r\n                            # 一度にひとつの画像のみ処理\r\n                            break\r\n                        \r\n            return detected_any\r\n            \r\n        except Exception as e:\r\n            self.log(f\"処理エラー: {str(e)}\")\r\n            return False\r\n            \r\n    def test_image_detection(self):\r\n        \"\"\"画像検出のテスト\"\"\"\r\n        config = self.config_manager.get_config()\r\n        device = config.get('device')\r\n        \r\n        if not device:\r\n            raise Exception(\"デバイスが選択されていません\")\r\n            \r\n        # デバイスコントローラーの初期化\r\n        self.device_controller.set_device(device)\r\n        \r\n        # 画像検出器の初期化\r\n        threshold = config.get('detection_threshold', 0.8)\r\n        self.image_detector.set_threshold(threshold)\r\n        \r\n        # スクリーンショットの取得\r\n        screenshot = self.device_controller.get_screenshot()\r\n        if screenshot is None:\r\n            raise Exception(\"スクリーンショットの取得に失敗しました\")\r\n            \r\n        # 各画像の検出テスト\r\n        results = {}\r\n        \r\n        # タップする画像の検出テスト\r\n        for image_name, image_path in self.image_paths.items():\r\n            try:\r\n                positions = self.image_detector.detect_image(screenshot, image_path)\r\n                results[image_name] = len(positions) > 0\r\n                \r\n                if positions:\r\n                    self.log(f\"{image_name}: 検出 ({len(positions)}箇所)\")\r\n                else:\r\n                    self.log(f\"{image_name}: 未検出\")\r\n                    \r\n            except Exception as e:\r\n                self.log(f\"{image_name}: エラー - {str(e)}\")\r\n                results[image_name] = False\r\n        \r\n        # タップしない画像の検出テスト\r\n        for ignore_name, ignore_path in self.ignore_images.items():\r\n            try:\r\n                positions = self.image_detector.detect_image(screenshot, ignore_path)\r\n                results[f\"{ignore_name}(無視)\"] = len(positions) > 0\r\n                \r\n                if positions:\r\n                    self.log(f\"{ignore_name}(無視): 検出 ({len(positions)}箇所)\")\r\n                else:\r\n                    self.log(f\"{ignore_name}(無視): 未検出\")\r\n                    \r\n            except Exception as e:\r\n                self.log(f\"{ignore_name}(無視): エラー - {str(e)}\")\r\n                results[f\"{ignore_name}(無視)\"] = False\r\n                \r\n        return results\r\n"
        }
    ]
}