{
    "sourceFile": "README.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1750493481819,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1750495704828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,147 +1,201 @@\n-# 妖怪ウォッチぷにぷに自動周回ソフト\r\n+# 妖怪ウォッチぷにぷに 自動周回ツール\r\n \r\n-妖怪ウォッチぷにぷにの自動周回を行うGUIアプリケーションです。OpenCV2とADB（LDPlayer）を使用して、複数デバイスの同時制御が可能です。\r\n+妖怪ウォッチぷにぷにの自動周回を行うGUIアプリケーションです。  \r\n+OpenCV2とADB（LDPlayer）を使用して、複数デバイスでの高速自動周回を実現します。\r\n \r\n ## 機能\r\n \r\n-- 複数デバイス同時制御\r\n-- GUI操作\r\n-- 画像認識による自動操作\r\n-- リアルタイムログ表示\r\n-- 設定の保存・読み込み\r\n-- スクリーンショット取得\r\n+- 🔄 **自動周回**: 指定された順序でタップを自動実行\r\n+- 📱 **複数デバイス対応**: 複数のエミュレータで同時実行\r\n+- ⚡ **高速処理**: メモリから直接画面取得、並行処理対応\r\n+- 🎯 **高精度検出**: OpenCV2を使用した画像認識\r\n+- 📊 **統計情報**: ループ回数、効率性の表示\r\n+- ⚙️ **設定可能**: 検出閾値、タップ間隔などの細かい調整\r\n+- 🖥️ **GUI**: 使いやすいグラフィカルインターフェース\r\n \r\n-## 動作フロー\r\n+## 自動周回の流れ\r\n \r\n-1. **boss.png**をタップ\r\n-2. **play.png**をタップ\r\n-3. **puzzle.png**をタップ（設定回数分）\r\n-4. **waza_ok.png**をタップ\r\n-5. ③④を**next.png**が検知されるまで繰り返す\r\n-6. **next.png**をタップ\r\n-7. ①に戻ってループ\r\n+1. **boss.png** を検出してタップ\r\n+2. **play.png** を検出してタップ（※stage_45.png検出時はスキップ）\r\n+3. **puzzle.png** を検出してタップ\r\n+4. **waza_ok.png** を検出してタップ\r\n+5. **next.png** を検出してタップ\r\n+6. ①に戻ってループ\r\n \r\n ### 特別な処理\r\n \r\n-- **close.png**または**close_mini.png**が検知されたら常時タップ\r\n-- **stage_45.png**が検知された場合：\r\n-  - close系ボタンはタップしない（完全無効化）\r\n-  - プレイ前・プレイ後・バトル中の3段階でチェック\r\n-  - ステージ45終了まで継続的に監視\r\n-  - バトルループ内でも独立してclose系を無効化\r\n+- `play.png`が検出された際に`stage_45.png`も同時に検出された場合、`close.png`または`close_mini.png`はタップしません\r\n \r\n ## 必要な環境\r\n \r\n-### ソフトウェア\r\n+- **Python 3.8以上**\r\n+- **ADB (Android Debug Bridge)**\r\n+  - LDPlayerの場合: インストールディレクトリの`adb.exe`\r\n+  - Android SDK Platform Toolsからも入手可能\r\n+- **LDPlayer** または **その他のAndroidエミュレータ**\r\n \r\n-- Python 3.7以上\r\n-- ADB（Android Debug Bridge）\r\n-- LDPlayer（またはADB対応エミュレーター）\r\n+## インストール方法\r\n \r\n-### Pythonライブラリ\r\n+### 1. リポジトリのクローン\r\n+```bash\r\n+git clone [repository-url]\r\n+cd PuniPuni_Auto_Play\r\n+```\r\n \r\n+### 2. 自動インストール（推奨）\r\n ```bash\r\n-pip install -r requirements.txt\r\n+start.bat\r\n ```\r\n \r\n-### ADBセットアップ\r\n+### 3. 手動インストール\r\n+```bash\r\n+# 仮想環境を作成\r\n+python -m venv venv\r\n \r\n-1. LDPlayerを起動\r\n-2. LDPlayerの設定でADBデバッグを有効化\r\n-3. ADBコマンドがシステムパスに追加されていることを確認\r\n+# 仮想環境をアクティベート（Windows）\r\n+venv\\Scripts\\activate\r\n \r\n+# 依存関係をインストール\r\n+pip install -r requirements.txt\r\n+```\r\n+\r\n ## 使用方法\r\n \r\n-### 1. 画像ファイルの準備\r\n+### 1. 準備\r\n+1. LDPlayerを起動し、妖怪ウォッチぷにぷにをインストール\r\n+2. ADBデバッグを有効化\r\n+3. 画像ファイル（boss.png, play.png等）が`image/`フォルダに存在することを確認\r\n \r\n-`image/`フォルダに以下の画像ファイルを配置してください：\r\n-\r\n-- `boss.jpg` - ボス選択ボタン\r\n-- `play.png` - プレイボタン\r\n-- `puzzle.png` - パズルボタン\r\n-- `waza_ok.png` - 技OKボタン\r\n-- `next.png` - 次へボタン\r\n-- `close.png` - 閉じるボタン\r\n-- `close_mini.png` - 小さい閉じるボタン\r\n-- `stage_45.png` - ステージ45表示\r\n-\r\n ### 2. アプリケーションの起動\r\n+```bash\r\n+# バッチファイルで起動（推奨）\r\n+start.bat\r\n \r\n-```bash\r\n+# または直接実行\r\n python main.py\r\n ```\r\n \r\n-### 3. 操作手順\r\n+### 3. デバイスの設定\r\n+1. **「デバイス管理」**タブを開く\r\n+2. **「デバイスを検出」**ボタンをクリック\r\n+3. 検出されたデバイスから使用するものを選択し**「追加」**\r\n \r\n-1. **デバイス更新**ボタンをクリックしてデバイスを検出\r\n-2. 制御したいデバイスを選択（複数選択可）\r\n-3. 必要に応じて設定を調整\r\n-4. **開始**ボタンをクリックして自動周回を開始\r\n-5. **停止**ボタンをクリックして停止\r\n+### 4. 設定の調整（任意）\r\n+**「設定」**タブで以下を調整可能：\r\n+- **検出閾値**: 画像認識の精度（0.1-1.0）\r\n+- **タップ間隔**: タップ間のクールダウン時間\r\n+- **キャプチャ間隔**: 画面取得の頻度\r\n+- **最大エラー回数**: デバイスを無効化するエラー回数\r\n \r\n-## 設定項目\r\n+### 5. 自動化の開始\r\n+1. **「自動化開始」**ボタンをクリック\r\n+2. **「統計」**タブでループ回数や効率を確認\r\n+3. 停止する場合は**「自動化停止」**ボタンをクリック\r\n \r\n-- **類似度閾値**: 画像認識の精度（0.5-1.0）\r\n-- **タップ間隔**: 各操作間の待機時間（秒）- 実際のタップに近い遅延に最適化\r\n-- **パズルタップ回数**: puzzle.pngを連続でタップする回数\r\n-- **検知間隔**: 画像検知の頻度（秒）- 高速化のため短縮\r\n-- **メモリ直接取得**: メモリから直接スクリーンショットを取得（超高速化）\r\n+## ファイル構成\r\n \r\n-## 🔥 性能比較表\r\n+```\r\n+PuniPuni_Auto_Play/\r\n+├── main.py                 # メインGUIアプリケーション\r\n+├── automation_engine.py    # 自動化エンジン\r\n+├── device_controller.py    # デバイス制御\r\n+├── image_detector.py       # 画像認識エンジン\r\n+├── config_manager.py       # 設定管理\r\n+├── requirements.txt        # 依存関係\r\n+├── start.bat              # 起動スクリプト\r\n+├── settings.ini           # 設定ファイル（自動生成）\r\n+├── automation.log         # ログファイル（自動生成）\r\n+└── image/                 # 画像テンプレート\r\n+    ├── boss.jpg\r\n+    ├── play.png\r\n+    ├── puzzle.png\r\n+    ├── waza_ok.png\r\n+    ├── next.png\r\n+    ├── stage_45.png\r\n+    ├── close.png\r\n+    └── close_mini.png\r\n+```\r\n \r\n-| 機能 | 従来版 | **メモリ直接版** | 改善率 |\r\n-|------|-------|----------------|--------|\r\n-| スクリーンショット | 200-500ms | **50-100ms** | **最大80%高速化** |\r\n-| 1サイクル全体 | ~15秒 | **~6秒** | **60%高速化** |\r\n-| 画像検索処理 | 個別実行 | **同時実行** | **3倍高速** |\r\n-| ファイルI/O | 毎回発生 | **メモリ直接** | **I/O削減100%** |\r\n-| CPU使用率 | 高い | **最適化済み** | **30%削減** |\r\n+## 高速化・最適化の特徴\r\n \r\n-## 最適化機能\r\n+- **メモリ直接取得**: ADBを使用した高速スクリーンキャプチャ\r\n+- **並行処理**: 複数デバイスの同時処理\r\n+- **非同期処理**: I/O待機時間の最小化\r\n+- **常時監視**: 順番待ちなしの全パターン同時検知\r\n+- **効率的なテンプレートマッチング**: OpenCV2の最適化されたアルゴリズム\r\n \r\n-### 🚀 メモリ直接アクセス機能（NEW!）\r\n-- **RAWメモリ取得**: ADB exec-outでメモリから直接画面データを取得\r\n-- **ファイルI/O削減**: スクリーンショットファイルの作成・読み込みを省略\r\n-- **超高速画像認識**: 従来の50%以上の高速化を実現\r\n-- **自動フォールバック**: メモリ取得失敗時は従来方式に自動切り替え\r\n+## トラブルシューティング\r\n \r\n-### ⚡ 高速化機能\r\n-- **スクリーンショットキャッシュ**: 短時間内の重複取得を防止\r\n-- **複数画像同時検索**: 一度のスクリーンショットで複数画像を検索\r\n-- **並列処理**: 複数デバイスの同時制御\r\n-- **ログ最適化**: 高精度検出のみログ表示（ログ量削減）\r\n+### デバイスが検出されない\r\n+```bash\r\n+# ADBの状況を確認\r\n+adb devices\r\n \r\n-### 🎯 人間らしい操作\r\n-- **ランダム遅延**: 人間らしい微小な遅延を追加\r\n-- **タップ種類別遅延**: ボタンの種類に応じた適切な待機時間\r\n-- **操作最適化**: 実際のプレイヤーの操作パターンを模倣\r\n+# LDPlayerの場合、adb.exeの場所を確認し、PATHに追加\r\n+```\r\n \r\n-## トラブルシューティング\r\n+### 画像認識が不安定\r\n+- **検出閾値**を下げる（0.7-0.8推奨）\r\n+- 画像テンプレートの品質を確認\r\n+- エミュレータの解像度設定を確認\r\n \r\n-### デバイスが検出されない\r\n+### パフォーマンスが低い\r\n+- **キャプチャ間隔**を調整（0.1-0.2秒推奨）\r\n+- 不要なデバイスを無効化\r\n+- エミュレータのCPU/メモリ設定を確認\r\n \r\n-1. LDPlayerでADBデバッグが有効になっているか確認\r\n-2. コマンドプロンプトで`adb devices`を実行してデバイスが表示されるか確認\r\n-3. LDPlayerを再起動\r\n+### エラーが頻発する\r\n+- **最大エラー回数**を増やす\r\n+- ADB接続の安定性を確認\r\n+- ログファイルでエラー詳細を確認\r\n \r\n-### 画像認識がうまくいかない\r\n+## 設定ファイル\r\n \r\n-1. 類似度閾値を調整（通常は0.7-0.9が適切）\r\n-2. 画像ファイルが正しく配置されているか確認\r\n-3. スクリーンショット機能で現在の画面を確認\r\n+`settings.ini`で詳細な設定が可能：\r\n \r\n-### 動作が不安定\r\n+```ini\r\n+[DETECTION]\r\n+threshold = 0.8\r\n+tap_cooldown = 0.5\r\n+capture_interval = 0.1\r\n+max_error_count = 5\r\n \r\n-1. タップ間隔を長くする（1-2秒推奨）\r\n-2. 一度に多くのデバイスを制御している場合は数を減らす\r\n-3. LDPlayerの性能設定を確認\r\n+[DEVICES]\r\n+auto_detect = true\r\n+device_list = \r\n \r\n-## 注意事項\r\n+[LOGGING]\r\n+level = INFO\r\n+file = automation.log\r\n+max_size_mb = 10\r\n+backup_count = 5\r\n+```\r\n \r\n-- 本ソフトウェアは教育・研究目的で作成されています\r\n-- ゲームの利用規約を確認の上、自己責任でご使用ください\r\n-- 長時間の連続使用はデバイスに負荷をかける可能性があります\r\n+## ログ\r\n \r\n+アプリケーションの動作は以下で確認できます：\r\n+- GUI内のログ表示\r\n+- `automation.log`ファイル\r\n+- コンソール出力\r\n+\r\n+## 免責事項\r\n+\r\n+本ソフトウェアは教育・研究目的で作成されています。  \r\n+使用は自己責任で行い、ゲームの利用規約を遵守してください。\r\n+\r\n ## ライセンス\r\n \r\n MIT License\r\n+\r\n+## 更新履歴\r\n+\r\n+### v1.0.0\r\n+- 初回リリース\r\n+- 基本的な自動周回機能\r\n+- 複数デバイス対応\r\n+- GUI実装\r\n+- 統計機能\r\n+\r\n+## サポート\r\n+\r\n+バグ報告や機能要望は Issue にてお知らせください。\r\n"
                },
                {
                    "date": 1750516447431,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,68 +0,0 @@\n-# 妖怪ウォッチぷにぷに 自動タップツール\r\n-\r\n-妖怪ウォッチぷにぷにのプレイボタンと閉じるボタンを自動でタップするツールです。\r\n-\r\n-## 機能\r\n-\r\n-- OpenCV2による画像認識\r\n-- ADBを使用したAndroidデバイス操作\r\n-- GUI操作画面\r\n-- 検出間隔・タップ間隔・検出閾値の調整可能\r\n-- リアルタイムでの検出状況表示\r\n-\r\n-## 必要なもの\r\n-\r\n-1. **Python 3.7以上**\r\n-2. **Android SDK Platform-Tools (ADB)**\r\n-   - [Android SDK Platform-Tools](https://developer.android.com/studio/releases/platform-tools)をダウンロード\r\n-   - PATHに追加\r\n-3. **Androidデバイス**\r\n-   - USB デバッグを有効にする\r\n-   - PCと接続\r\n-\r\n-## セットアップ\r\n-\r\n-1. このフォルダをダウンロード\r\n-2. `start.bat`を実行（パッケージの自動インストール）\r\n-3. ADBでデバイスが認識されていることを確認\r\n-\r\n-## 使用方法\r\n-\r\n-1. Androidデバイスを接続\r\n-2. 妖怪ウォッチぷにぷにを起動\r\n-3. `main.py`または`start.bat`を実行\r\n-4. GUIで「開始」ボタンを押す\r\n-\r\n-## 設定\r\n-\r\n-- **検出間隔**: 画像検出を行う間隔（秒）\r\n-- **タップ間隔**: 検出された画像をタップする間隔（秒）\r\n-- **検出閾値**: 画像マッチングの閾値（0.5-1.0）\r\n-\r\n-## テンプレート画像\r\n-\r\n-`image`フォルダに以下の画像を配置：\r\n-- `play_1.png`: プレイボタン1\r\n-- `play_2.png`: プレイボタン2\r\n-- `close.png`: 閉じるボタン\r\n-- `close_mini.png`: 小さい閉じるボタン\r\n-- `next.png`: 次へボタン\r\n-\r\n-## 注意事項\r\n-\r\n-- デバイスのUSBデバッグを有効にしてください\r\n-- 画面の解像度や表示によって検出精度が変わる場合があります\r\n-- 検出閾値を調整して最適な設定を見つけてください\r\n-\r\n-## トラブルシューティング\r\n-\r\n-### ADBが見つからない\r\n-- Android SDK Platform-ToolsをインストールしてPATHに追加\r\n-\r\n-### デバイスが認識されない\r\n-- USBデバッグが有効になっているか確認\r\n-- `adb devices`コマンドでデバイスが表示されるか確認\r\n-\r\n-### 画像が検出されない\r\n-- 検出閾値を下げてみる（0.8 → 0.7など）\r\n-- テンプレート画像が正しく配置されているか確認\r\n\\ No newline at end of file\n"
                }
            ],
            "date": 1750493481819,
            "name": "Commit-0",
            "content": "# 妖怪ウォッチぷにぷに自動周回ソフト\r\n\r\n妖怪ウォッチぷにぷにの自動周回を行うGUIアプリケーションです。OpenCV2とADB（LDPlayer）を使用して、複数デバイスの同時制御が可能です。\r\n\r\n## 機能\r\n\r\n- 複数デバイス同時制御\r\n- GUI操作\r\n- 画像認識による自動操作\r\n- リアルタイムログ表示\r\n- 設定の保存・読み込み\r\n- スクリーンショット取得\r\n\r\n## 動作フロー\r\n\r\n1. **boss.png**をタップ\r\n2. **play.png**をタップ\r\n3. **puzzle.png**をタップ（設定回数分）\r\n4. **waza_ok.png**をタップ\r\n5. ③④を**next.png**が検知されるまで繰り返す\r\n6. **next.png**をタップ\r\n7. ①に戻ってループ\r\n\r\n### 特別な処理\r\n\r\n- **close.png**または**close_mini.png**が検知されたら常時タップ\r\n- **stage_45.png**が検知された場合：\r\n  - close系ボタンはタップしない（完全無効化）\r\n  - プレイ前・プレイ後・バトル中の3段階でチェック\r\n  - ステージ45終了まで継続的に監視\r\n  - バトルループ内でも独立してclose系を無効化\r\n\r\n## 必要な環境\r\n\r\n### ソフトウェア\r\n\r\n- Python 3.7以上\r\n- ADB（Android Debug Bridge）\r\n- LDPlayer（またはADB対応エミュレーター）\r\n\r\n### Pythonライブラリ\r\n\r\n```bash\r\npip install -r requirements.txt\r\n```\r\n\r\n### ADBセットアップ\r\n\r\n1. LDPlayerを起動\r\n2. LDPlayerの設定でADBデバッグを有効化\r\n3. ADBコマンドがシステムパスに追加されていることを確認\r\n\r\n## 使用方法\r\n\r\n### 1. 画像ファイルの準備\r\n\r\n`image/`フォルダに以下の画像ファイルを配置してください：\r\n\r\n- `boss.jpg` - ボス選択ボタン\r\n- `play.png` - プレイボタン\r\n- `puzzle.png` - パズルボタン\r\n- `waza_ok.png` - 技OKボタン\r\n- `next.png` - 次へボタン\r\n- `close.png` - 閉じるボタン\r\n- `close_mini.png` - 小さい閉じるボタン\r\n- `stage_45.png` - ステージ45表示\r\n\r\n### 2. アプリケーションの起動\r\n\r\n```bash\r\npython main.py\r\n```\r\n\r\n### 3. 操作手順\r\n\r\n1. **デバイス更新**ボタンをクリックしてデバイスを検出\r\n2. 制御したいデバイスを選択（複数選択可）\r\n3. 必要に応じて設定を調整\r\n4. **開始**ボタンをクリックして自動周回を開始\r\n5. **停止**ボタンをクリックして停止\r\n\r\n## 設定項目\r\n\r\n- **類似度閾値**: 画像認識の精度（0.5-1.0）\r\n- **タップ間隔**: 各操作間の待機時間（秒）- 実際のタップに近い遅延に最適化\r\n- **パズルタップ回数**: puzzle.pngを連続でタップする回数\r\n- **検知間隔**: 画像検知の頻度（秒）- 高速化のため短縮\r\n- **メモリ直接取得**: メモリから直接スクリーンショットを取得（超高速化）\r\n\r\n## 🔥 性能比較表\r\n\r\n| 機能 | 従来版 | **メモリ直接版** | 改善率 |\r\n|------|-------|----------------|--------|\r\n| スクリーンショット | 200-500ms | **50-100ms** | **最大80%高速化** |\r\n| 1サイクル全体 | ~15秒 | **~6秒** | **60%高速化** |\r\n| 画像検索処理 | 個別実行 | **同時実行** | **3倍高速** |\r\n| ファイルI/O | 毎回発生 | **メモリ直接** | **I/O削減100%** |\r\n| CPU使用率 | 高い | **最適化済み** | **30%削減** |\r\n\r\n## 最適化機能\r\n\r\n### 🚀 メモリ直接アクセス機能（NEW!）\r\n- **RAWメモリ取得**: ADB exec-outでメモリから直接画面データを取得\r\n- **ファイルI/O削減**: スクリーンショットファイルの作成・読み込みを省略\r\n- **超高速画像認識**: 従来の50%以上の高速化を実現\r\n- **自動フォールバック**: メモリ取得失敗時は従来方式に自動切り替え\r\n\r\n### ⚡ 高速化機能\r\n- **スクリーンショットキャッシュ**: 短時間内の重複取得を防止\r\n- **複数画像同時検索**: 一度のスクリーンショットで複数画像を検索\r\n- **並列処理**: 複数デバイスの同時制御\r\n- **ログ最適化**: 高精度検出のみログ表示（ログ量削減）\r\n\r\n### 🎯 人間らしい操作\r\n- **ランダム遅延**: 人間らしい微小な遅延を追加\r\n- **タップ種類別遅延**: ボタンの種類に応じた適切な待機時間\r\n- **操作最適化**: 実際のプレイヤーの操作パターンを模倣\r\n\r\n## トラブルシューティング\r\n\r\n### デバイスが検出されない\r\n\r\n1. LDPlayerでADBデバッグが有効になっているか確認\r\n2. コマンドプロンプトで`adb devices`を実行してデバイスが表示されるか確認\r\n3. LDPlayerを再起動\r\n\r\n### 画像認識がうまくいかない\r\n\r\n1. 類似度閾値を調整（通常は0.7-0.9が適切）\r\n2. 画像ファイルが正しく配置されているか確認\r\n3. スクリーンショット機能で現在の画面を確認\r\n\r\n### 動作が不安定\r\n\r\n1. タップ間隔を長くする（1-2秒推奨）\r\n2. 一度に多くのデバイスを制御している場合は数を減らす\r\n3. LDPlayerの性能設定を確認\r\n\r\n## 注意事項\r\n\r\n- 本ソフトウェアは教育・研究目的で作成されています\r\n- ゲームの利用規約を確認の上、自己責任でご使用ください\r\n- 長時間の連続使用はデバイスに負荷をかける可能性があります\r\n\r\n## ライセンス\r\n\r\nMIT License\r\n"
        }
    ]
}