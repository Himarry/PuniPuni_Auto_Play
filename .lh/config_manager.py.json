{
    "sourceFile": "config_manager.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1750495704603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1750500333551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -160,10 +160,25 @@\n             'stage_45_file': self.config.get('TEMPLATES', 'stage_45_file', fallback='stage_45.png'),\r\n             'close_file': self.config.get('TEMPLATES', 'close_file', fallback='close.png'),\r\n             'close_mini_file': self.config.get('TEMPLATES', 'close_mini_file', fallback='close_mini.png')\r\n         }\r\n+    \r\n+    def get_image_thresholds(self) -> Dict[str, float]:\r\n+        \"\"\"画像ごとの検出閾値を取得（なければ空dict）\"\"\"\r\n+        if 'THRESHOLDS' not in self.config:\r\n+            return {}\r\n+        return {k: float(v) for k, v in self.config['THRESHOLDS'].items()}\r\n \r\n-\r\n+    def set_image_thresholds(self, thresholds: Dict[str, float]):\r\n+        \"\"\"画像ごとの検出閾値を保存\"\"\"\r\n+        if 'THRESHOLDS' not in self.config:\r\n+            self.config.add_section('THRESHOLDS')\r\n+        # 既存クリア\r\n+        for k in list(self.config['THRESHOLDS'].keys()):\r\n+            self.config.remove_option('THRESHOLDS', k)\r\n+        for k, v in thresholds.items():\r\n+            self.config.set('THRESHOLDS', k, str(v))\r\n+        self.save_config()\r\n def setup_logging(config_manager: ConfigManager):\r\n     \"\"\"ロギング設定をセットアップ\"\"\"\r\n     log_settings = config_manager.get_logging_settings()\r\n     \r\n@@ -174,9 +189,9 @@\n     formatter = logging.Formatter(\r\n         '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\r\n     )\r\n     \r\n-    # ファイルハンドラー（ロー테ーション対応）\r\n+    # ファイルハンドラー（ローテーション対応）\r\n     from logging.handlers import RotatingFileHandler\r\n     file_handler = RotatingFileHandler(\r\n         log_settings['file'],\r\n         maxBytes=log_settings['max_size_mb'] * 1024 * 1024,\r\n"
                },
                {
                    "date": 1750503478350,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -177,8 +177,25 @@\n             self.config.remove_option('THRESHOLDS', k)\r\n         for k, v in thresholds.items():\r\n             self.config.set('THRESHOLDS', k, str(v))\r\n         self.save_config()\r\n+\r\n+    def get_image_random_ranges(self) -> Dict[str, int]:\r\n+        \"\"\"画像ごとのランダムタップ幅を取得（なければ0）\"\"\"\r\n+        if 'RANDOM_RANGE' not in self.config:\r\n+            return {}\r\n+        return {k: int(v) for k, v in self.config['RANDOM_RANGE'].items()}\r\n+\r\n+    def set_image_random_ranges(self, random_ranges: Dict[str, int]):\r\n+        \"\"\"画像ごとのランダムタップ幅を保存\"\"\"\r\n+        if 'RANDOM_RANGE' not in self.config:\r\n+            self.config.add_section('RANDOM_RANGE')\r\n+        # 既存クリア\r\n+        for k in list(self.config['RANDOM_RANGE'].keys()):\r\n+            self.config.remove_option('RANDOM_RANGE', k)\r\n+        for k, v in random_ranges.items():\r\n+            self.config.set('RANDOM_RANGE', k, str(v))\r\n+        self.save_config()\r\n def setup_logging(config_manager: ConfigManager):\r\n     \"\"\"ロギング設定をセットアップ\"\"\"\r\n     log_settings = config_manager.get_logging_settings()\r\n     \r\n"
                },
                {
                    "date": 1750503615608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -177,25 +177,8 @@\n             self.config.remove_option('THRESHOLDS', k)\r\n         for k, v in thresholds.items():\r\n             self.config.set('THRESHOLDS', k, str(v))\r\n         self.save_config()\r\n-\r\n-    def get_image_random_ranges(self) -> Dict[str, int]:\r\n-        \"\"\"画像ごとのランダムタップ幅を取得（なければ0）\"\"\"\r\n-        if 'RANDOM_RANGE' not in self.config:\r\n-            return {}\r\n-        return {k: int(v) for k, v in self.config['RANDOM_RANGE'].items()}\r\n-\r\n-    def set_image_random_ranges(self, random_ranges: Dict[str, int]):\r\n-        \"\"\"画像ごとのランダムタップ幅を保存\"\"\"\r\n-        if 'RANDOM_RANGE' not in self.config:\r\n-            self.config.add_section('RANDOM_RANGE')\r\n-        # 既存クリア\r\n-        for k in list(self.config['RANDOM_RANGE'].keys()):\r\n-            self.config.remove_option('RANDOM_RANGE', k)\r\n-        for k, v in random_ranges.items():\r\n-            self.config.set('RANDOM_RANGE', k, str(v))\r\n-        self.save_config()\r\n def setup_logging(config_manager: ConfigManager):\r\n     \"\"\"ロギング設定をセットアップ\"\"\"\r\n     log_settings = config_manager.get_logging_settings()\r\n     \r\n"
                },
                {
                    "date": 1750503708141,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -177,8 +177,32 @@\n             self.config.remove_option('THRESHOLDS', k)\r\n         for k, v in thresholds.items():\r\n             self.config.set('THRESHOLDS', k, str(v))\r\n         self.save_config()\r\n+\r\n+    def get_image_random_settings(self) -> Dict[str, tuple]:\r\n+        \"\"\"画像ごとのランダムタップ幅(X, Y)を取得\"\"\"\r\n+        if 'RANDOM' not in self.config:\r\n+            return {}\r\n+        result = {}\r\n+        for k, v in self.config['RANDOM'].items():\r\n+            try:\r\n+                x, y = map(int, v.split(','))\r\n+                result[k] = (x, y)\r\n+            except Exception:\r\n+                result[k] = (1, 1)\r\n+        return result\r\n+\r\n+    def set_image_random_settings(self, random_settings: Dict[str, tuple]):\r\n+        \"\"\"画像ごとのランダムタップ幅(X, Y)を保存\"\"\"\r\n+        if 'RANDOM' not in self.config:\r\n+            self.config.add_section('RANDOM')\r\n+        # 既存クリア\r\n+        for k in list(self.config['RANDOM'].keys()):\r\n+            self.config.remove_option('RANDOM', k)\r\n+        for k, (x, y) in random_settings.items():\r\n+            self.config.set('RANDOM', k, f\"{x},{y}\")\r\n+        self.save_config()\r\n def setup_logging(config_manager: ConfigManager):\r\n     \"\"\"ロギング設定をセットアップ\"\"\"\r\n     log_settings = config_manager.get_logging_settings()\r\n     \r\n"
                },
                {
                    "date": 1750507056348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -178,31 +178,14 @@\n         for k, v in thresholds.items():\r\n             self.config.set('THRESHOLDS', k, str(v))\r\n         self.save_config()\r\n \r\n-    def get_image_random_settings(self) -> Dict[str, tuple]:\r\n-        \"\"\"画像ごとのランダムタップ幅(X, Y)を取得\"\"\"\r\n-        if 'RANDOM' not in self.config:\r\n-            return {}\r\n-        result = {}\r\n-        for k, v in self.config['RANDOM'].items():\r\n-            try:\r\n-                x, y = map(int, v.split(','))\r\n-                result[k] = (x, y)\r\n-            except Exception:\r\n-                result[k] = (1, 1)\r\n-        return result\r\n+    # --- 画像ごとのランダムタップ幅関連メソッド削除 ---\r\n+    # def get_image_random_settings(self) -> Dict[str, tuple]:\r\n+    #     ...\r\n+    # def set_image_random_settings(self, random_settings: Dict[str, tuple]):\r\n+    #     ...\r\n \r\n-    def set_image_random_settings(self, random_settings: Dict[str, tuple]):\r\n-        \"\"\"画像ごとのランダムタップ幅(X, Y)を保存\"\"\"\r\n-        if 'RANDOM' not in self.config:\r\n-            self.config.add_section('RANDOM')\r\n-        # 既存クリア\r\n-        for k in list(self.config['RANDOM'].keys()):\r\n-            self.config.remove_option('RANDOM', k)\r\n-        for k, (x, y) in random_settings.items():\r\n-            self.config.set('RANDOM', k, f\"{x},{y}\")\r\n-        self.save_config()\r\n def setup_logging(config_manager: ConfigManager):\r\n     \"\"\"ロギング設定をセットアップ\"\"\"\r\n     log_settings = config_manager.get_logging_settings()\r\n     \r\n"
                },
                {
                    "date": 1750517162023,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,222 +1,141 @@\n-import configparser\r\n+import json\r\n import os\r\n-import logging\r\n-from typing import Dict, Any, List\r\n \r\n-\r\n class ConfigManager:\r\n-    \"\"\"設定管理クラス\"\"\"\r\n-    \r\n-    def __init__(self, config_file: str = \"settings.ini\"):\r\n+    def __init__(self, config_file=\"config.json\"):\r\n         self.config_file = config_file\r\n-        self.config = configparser.ConfigParser()\r\n-        self.logger = logging.getLogger(__name__)\r\n-        self.load_config()\r\n-    \r\n+        self.config = self.load_config()\r\n+        \r\n     def load_config(self):\r\n-        \"\"\"設定ファイルを読み込み\"\"\"\r\n+        \"\"\"設定ファイルの読み込み\"\"\"\r\n+        default_config = {\r\n+            'device': '',\r\n+            'tap_interval': 0.5,\r\n+            'detection_threshold': 0.8,\r\n+            'window_size': '600x500',\r\n+            'auto_refresh_devices': True,\r\n+            'log_level': 'INFO',\r\n+            'save_debug_images': False,\r\n+            'debug_images_path': 'debug_images'\r\n+        }\r\n+        \r\n         if os.path.exists(self.config_file):\r\n             try:\r\n-                self.config.read(self.config_file, encoding='utf-8')\r\n-                self.logger.info(f\"設定ファイル '{self.config_file}' を読み込みました\")\r\n+                with open(self.config_file, 'r', encoding='utf-8') as f:\r\n+                    loaded_config = json.load(f)\r\n+                    \r\n+                # デフォルト設定と統合\r\n+                default_config.update(loaded_config)\r\n+                return default_config\r\n+                \r\n             except Exception as e:\r\n-                self.logger.error(f\"設定ファイル読み込みエラー: {e}\")\r\n-                self.create_default_config()\r\n+                print(f\"設定ファイル読み込みエラー: {str(e)}\")\r\n+                return default_config\r\n         else:\r\n-            self.create_default_config()\r\n-    \r\n-    def create_default_config(self):\r\n-        \"\"\"デフォルト設定を作成\"\"\"\r\n-        self.config['DETECTION'] = {\r\n-            'threshold': '0.8',\r\n-            'tap_cooldown': '0.5',\r\n-            'capture_interval': '0.1',\r\n-            'max_error_count': '5'\r\n-        }\r\n-        \r\n-        self.config['DEVICES'] = {\r\n-            'auto_detect': 'true',\r\n-            'device_list': ''\r\n-        }\r\n-        \r\n-        self.config['LOGGING'] = {\r\n-            'level': 'INFO',\r\n-            'file': 'automation.log',\r\n-            'max_size_mb': '10',\r\n-            'backup_count': '5'\r\n-        }\r\n-        \r\n-        self.config['GUI'] = {\r\n-            'window_width': '800',\r\n-            'window_height': '600',\r\n-            'always_on_top': 'false',\r\n-            'minimize_to_tray': 'true'\r\n-        }\r\n-        \r\n-        self.config['TEMPLATES'] = {\r\n-            'directory': 'image',\r\n-            'boss_file': 'boss.jpg',\r\n-            'play_file': 'play.png',\r\n-            'puzzle_file': 'puzzle.png',\r\n-            'waza_ok_file': 'waza_ok.png',\r\n-            'next_file': 'next.png',\r\n-            'stage_45_file': 'stage_45.png',\r\n-            'close_file': 'close.png',\r\n-            'close_mini_file': 'close_mini.png'\r\n-        }\r\n-        \r\n-        self.save_config()\r\n-        self.logger.info(\"デフォルト設定を作成しました\")\r\n-    \r\n+            return default_config\r\n+            \r\n     def save_config(self):\r\n-        \"\"\"設定ファイルを保存\"\"\"\r\n+        \"\"\"設定ファイルの保存\"\"\"\r\n         try:\r\n             with open(self.config_file, 'w', encoding='utf-8') as f:\r\n-                self.config.write(f)\r\n-            self.logger.info(f\"設定ファイル '{self.config_file}' を保存しました\")\r\n+                json.dump(self.config, f, indent=2, ensure_ascii=False)\r\n+            return True\r\n         except Exception as e:\r\n-            self.logger.error(f\"設定ファイル保存エラー: {e}\")\r\n-    \r\n-    def get_detection_settings(self) -> Dict[str, Any]:\r\n-        \"\"\"検出設定を取得\"\"\"\r\n-        return {\r\n-            'threshold': self.config.getfloat('DETECTION', 'threshold', fallback=0.8),\r\n-            'tap_cooldown': self.config.getfloat('DETECTION', 'tap_cooldown', fallback=0.5),\r\n-            'capture_interval': self.config.getfloat('DETECTION', 'capture_interval', fallback=0.1),\r\n-            'max_error_count': self.config.getint('DETECTION', 'max_error_count', fallback=5)\r\n-        }\r\n-    \r\n-    def set_detection_settings(self, settings: Dict[str, Any]):\r\n-        \"\"\"検出設定を更新\"\"\"\r\n-        if 'DETECTION' not in self.config:\r\n-            self.config.add_section('DETECTION')\r\n+            print(f\"設定ファイル保存エラー: {str(e)}\")\r\n+            return False\r\n+            \r\n+    def get_config(self):\r\n+        \"\"\"設定の取得\"\"\"\r\n+        return self.config.copy()\r\n         \r\n-        for key, value in settings.items():\r\n-            self.config.set('DETECTION', key, str(value))\r\n+    def set_config(self, new_config):\r\n+        \"\"\"設定の更新\"\"\"\r\n+        self.config.update(new_config)\r\n+        self.save_config()\r\n         \r\n+    def get_value(self, key, default=None):\r\n+        \"\"\"特定の設定値を取得\"\"\"\r\n+        return self.config.get(key, default)\r\n+        \r\n+    def set_value(self, key, value):\r\n+        \"\"\"特定の設定値を設定\"\"\"\r\n+        self.config[key] = value\r\n         self.save_config()\r\n-    \r\n-    def get_device_settings(self) -> Dict[str, Any]:\r\n-        \"\"\"デバイス設定を取得\"\"\"\r\n-        device_list_str = self.config.get('DEVICES', 'device_list', fallback='')\r\n-        device_list = [d.strip() for d in device_list_str.split(',') if d.strip()]\r\n         \r\n-        return {\r\n-            'auto_detect': self.config.getboolean('DEVICES', 'auto_detect', fallback=True),\r\n-            'device_list': device_list\r\n+    def reset_to_default(self):\r\n+        \"\"\"設定をデフォルトに戻す\"\"\"\r\n+        default_config = {\r\n+            'device': '',\r\n+            'tap_interval': 0.5,\r\n+            'detection_threshold': 0.8,\r\n+            'window_size': '600x500',\r\n+            'auto_refresh_devices': True,\r\n+            'log_level': 'INFO',\r\n+            'save_debug_images': False,\r\n+            'debug_images_path': 'debug_images'\r\n         }\r\n-    \r\n-    def set_device_settings(self, settings: Dict[str, Any]):\r\n-        \"\"\"デバイス設定を更新\"\"\"\r\n-        if 'DEVICES' not in self.config:\r\n-            self.config.add_section('DEVICES')\r\n         \r\n-        if 'auto_detect' in settings:\r\n-            self.config.set('DEVICES', 'auto_detect', str(settings['auto_detect']))\r\n+        self.config = default_config\r\n+        self.save_config()\r\n         \r\n-        if 'device_list' in settings:\r\n-            device_list_str = ','.join(settings['device_list'])\r\n-            self.config.set('DEVICES', 'device_list', device_list_str)\r\n+    def validate_config(self):\r\n+        \"\"\"設定の検証\"\"\"\r\n+        errors = []\r\n         \r\n-        self.save_config()\r\n-    \r\n-    def get_logging_settings(self) -> Dict[str, Any]:\r\n-        \"\"\"ログ設定を取得\"\"\"\r\n-        return {\r\n-            'level': self.config.get('LOGGING', 'level', fallback='INFO'),\r\n-            'file': self.config.get('LOGGING', 'file', fallback='automation.log'),\r\n-            'max_size_mb': self.config.getint('LOGGING', 'max_size_mb', fallback=10),\r\n-            'backup_count': self.config.getint('LOGGING', 'backup_count', fallback=5)\r\n-        }\r\n-    \r\n-    def get_gui_settings(self) -> Dict[str, Any]:\r\n-        \"\"\"GUI設定を取得\"\"\"\r\n-        return {\r\n-            'window_width': self.config.getint('GUI', 'window_width', fallback=800),\r\n-            'window_height': self.config.getint('GUI', 'window_height', fallback=600),\r\n-            'always_on_top': self.config.getboolean('GUI', 'always_on_top', fallback=False),\r\n-            'minimize_to_tray': self.config.getboolean('GUI', 'minimize_to_tray', fallback=True)\r\n-        }\r\n-    \r\n-    def set_gui_settings(self, settings: Dict[str, Any]):\r\n-        \"\"\"GUI設定を更新\"\"\"\r\n-        if 'GUI' not in self.config:\r\n-            self.config.add_section('GUI')\r\n+        # タップ間隔の検証\r\n+        tap_interval = self.config.get('tap_interval', 0.5)\r\n+        if not isinstance(tap_interval, (int, float)) or tap_interval < 0.1 or tap_interval > 10:\r\n+            errors.append(\"タップ間隔は0.1秒から10秒の間で設定してください\")\r\n+            \r\n+        # 検出精度の検証\r\n+        threshold = self.config.get('detection_threshold', 0.8)\r\n+        if not isinstance(threshold, (int, float)) or threshold < 0.1 or threshold > 1.0:\r\n+            errors.append(\"検出精度は0.1から1.0の間で設定してください\")\r\n+            \r\n+        return errors\r\n         \r\n-        for key, value in settings.items():\r\n-            self.config.set('GUI', key, str(value))\r\n+    def export_config(self, export_path):\r\n+        \"\"\"設定のエクスポート\"\"\"\r\n+        try:\r\n+            with open(export_path, 'w', encoding='utf-8') as f:\r\n+                json.dump(self.config, f, indent=2, ensure_ascii=False)\r\n+            return True\r\n+        except Exception as e:\r\n+            print(f\"設定エクスポートエラー: {str(e)}\")\r\n+            return False\r\n+            \r\n+    def import_config(self, import_path):\r\n+        \"\"\"設定のインポート\"\"\"\r\n+        try:\r\n+            with open(import_path, 'r', encoding='utf-8') as f:\r\n+                imported_config = json.load(f)\r\n+                \r\n+            # 現在の設定と統合\r\n+            self.config.update(imported_config)\r\n+            \r\n+            # 設定の検証\r\n+            errors = self.validate_config()\r\n+            if errors:\r\n+                print(\"設定の警告:\")\r\n+                for error in errors:\r\n+                    print(f\"  - {error}\")\r\n+                    \r\n+            self.save_config()\r\n+            return True\r\n+            \r\n+        except Exception as e:\r\n+            print(f\"設定インポートエラー: {str(e)}\")\r\n+            return False\r\n+            \r\n+    def backup_config(self, backup_path=None):\r\n+        \"\"\"設定のバックアップ\"\"\"\r\n+        if backup_path is None:\r\n+            import datetime\r\n+            timestamp = datetime.datetime.now().strftime(\"%Y%m%d_%H%M%S\")\r\n+            backup_path = f\"config_backup_{timestamp}.json\"\r\n+            \r\n+        return self.export_config(backup_path)\r\n         \r\n-        self.save_config()\r\n-    \r\n-    def get_template_settings(self) -> Dict[str, str]:\r\n-        \"\"\"テンプレート設定を取得\"\"\"\r\n-        return {\r\n-            'directory': self.config.get('TEMPLATES', 'directory', fallback='image'),\r\n-            'boss_file': self.config.get('TEMPLATES', 'boss_file', fallback='boss.jpg'),\r\n-            'play_file': self.config.get('TEMPLATES', 'play_file', fallback='play.png'),\r\n-            'puzzle_file': self.config.get('TEMPLATES', 'puzzle_file', fallback='puzzle.png'),\r\n-            'waza_ok_file': self.config.get('TEMPLATES', 'waza_ok_file', fallback='waza_ok.png'),\r\n-            'next_file': self.config.get('TEMPLATES', 'next_file', fallback='next.png'),\r\n-            'stage_45_file': self.config.get('TEMPLATES', 'stage_45_file', fallback='stage_45.png'),\r\n-            'close_file': self.config.get('TEMPLATES', 'close_file', fallback='close.png'),\r\n-            'close_mini_file': self.config.get('TEMPLATES', 'close_mini_file', fallback='close_mini.png')\r\n-        }\r\n-    \r\n-    def get_image_thresholds(self) -> Dict[str, float]:\r\n-        \"\"\"画像ごとの検出閾値を取得（なければ空dict）\"\"\"\r\n-        if 'THRESHOLDS' not in self.config:\r\n-            return {}\r\n-        return {k: float(v) for k, v in self.config['THRESHOLDS'].items()}\r\n-\r\n-    def set_image_thresholds(self, thresholds: Dict[str, float]):\r\n-        \"\"\"画像ごとの検出閾値を保存\"\"\"\r\n-        if 'THRESHOLDS' not in self.config:\r\n-            self.config.add_section('THRESHOLDS')\r\n-        # 既存クリア\r\n-        for k in list(self.config['THRESHOLDS'].keys()):\r\n-            self.config.remove_option('THRESHOLDS', k)\r\n-        for k, v in thresholds.items():\r\n-            self.config.set('THRESHOLDS', k, str(v))\r\n-        self.save_config()\r\n-\r\n-    # --- 画像ごとのランダムタップ幅関連メソッド削除 ---\r\n-    # def get_image_random_settings(self) -> Dict[str, tuple]:\r\n-    #     ...\r\n-    # def set_image_random_settings(self, random_settings: Dict[str, tuple]):\r\n-    #     ...\r\n-\r\n-def setup_logging(config_manager: ConfigManager):\r\n-    \"\"\"ロギング設定をセットアップ\"\"\"\r\n-    log_settings = config_manager.get_logging_settings()\r\n-    \r\n-    # ログレベルの設定\r\n-    log_level = getattr(logging, log_settings['level'].upper(), logging.INFO)\r\n-    \r\n-    # ログフォーマット\r\n-    formatter = logging.Formatter(\r\n-        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\r\n-    )\r\n-    \r\n-    # ファイルハンドラー（ローテーション対応）\r\n-    from logging.handlers import RotatingFileHandler\r\n-    file_handler = RotatingFileHandler(\r\n-        log_settings['file'],\r\n-        maxBytes=log_settings['max_size_mb'] * 1024 * 1024,\r\n-        backupCount=log_settings['backup_count'],\r\n-        encoding='utf-8'\r\n-    )\r\n-    file_handler.setFormatter(formatter)\r\n-    \r\n-    # コンソールハンドラー\r\n-    console_handler = logging.StreamHandler()\r\n-    console_handler.setFormatter(formatter)\r\n-    \r\n-    # ルートロガーの設定\r\n-    root_logger = logging.getLogger()\r\n-    root_logger.setLevel(log_level)\r\n-    root_logger.addHandler(file_handler)\r\n-    root_logger.addHandler(console_handler)\r\n-    \r\n-    # 既存のハンドラーをクリア（重複を防ぐ）\r\n-    for handler in root_logger.handlers[:-2]:\r\n-        root_logger.removeHandler(handler)\r\n+    def __str__(self):\r\n+        \"\"\"設定の文字列表現\"\"\"\r\n+        return json.dumps(self.config, indent=2, ensure_ascii=False)\r\n"
                },
                {
                    "date": 1750518120614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,13 @@\n             'window_size': '600x500',\r\n             'auto_refresh_devices': True,\r\n             'log_level': 'INFO',\r\n             'save_debug_images': False,\r\n-            'debug_images_path': 'debug_images'\r\n+            'debug_images_path': 'debug_images',\r\n+            'prevent_goukan': True,\r\n+            'prevent_yuubin': True,\r\n+            'prevent_ranking': True,\r\n+            'prevent_menu': True\r\n         }\r\n         \r\n         if os.path.exists(self.config_file):\r\n             try:\r\n"
                }
            ],
            "date": 1750495704603,
            "name": "Commit-0",
            "content": "import configparser\r\nimport os\r\nimport logging\r\nfrom typing import Dict, Any, List\r\n\r\n\r\nclass ConfigManager:\r\n    \"\"\"設定管理クラス\"\"\"\r\n    \r\n    def __init__(self, config_file: str = \"settings.ini\"):\r\n        self.config_file = config_file\r\n        self.config = configparser.ConfigParser()\r\n        self.logger = logging.getLogger(__name__)\r\n        self.load_config()\r\n    \r\n    def load_config(self):\r\n        \"\"\"設定ファイルを読み込み\"\"\"\r\n        if os.path.exists(self.config_file):\r\n            try:\r\n                self.config.read(self.config_file, encoding='utf-8')\r\n                self.logger.info(f\"設定ファイル '{self.config_file}' を読み込みました\")\r\n            except Exception as e:\r\n                self.logger.error(f\"設定ファイル読み込みエラー: {e}\")\r\n                self.create_default_config()\r\n        else:\r\n            self.create_default_config()\r\n    \r\n    def create_default_config(self):\r\n        \"\"\"デフォルト設定を作成\"\"\"\r\n        self.config['DETECTION'] = {\r\n            'threshold': '0.8',\r\n            'tap_cooldown': '0.5',\r\n            'capture_interval': '0.1',\r\n            'max_error_count': '5'\r\n        }\r\n        \r\n        self.config['DEVICES'] = {\r\n            'auto_detect': 'true',\r\n            'device_list': ''\r\n        }\r\n        \r\n        self.config['LOGGING'] = {\r\n            'level': 'INFO',\r\n            'file': 'automation.log',\r\n            'max_size_mb': '10',\r\n            'backup_count': '5'\r\n        }\r\n        \r\n        self.config['GUI'] = {\r\n            'window_width': '800',\r\n            'window_height': '600',\r\n            'always_on_top': 'false',\r\n            'minimize_to_tray': 'true'\r\n        }\r\n        \r\n        self.config['TEMPLATES'] = {\r\n            'directory': 'image',\r\n            'boss_file': 'boss.jpg',\r\n            'play_file': 'play.png',\r\n            'puzzle_file': 'puzzle.png',\r\n            'waza_ok_file': 'waza_ok.png',\r\n            'next_file': 'next.png',\r\n            'stage_45_file': 'stage_45.png',\r\n            'close_file': 'close.png',\r\n            'close_mini_file': 'close_mini.png'\r\n        }\r\n        \r\n        self.save_config()\r\n        self.logger.info(\"デフォルト設定を作成しました\")\r\n    \r\n    def save_config(self):\r\n        \"\"\"設定ファイルを保存\"\"\"\r\n        try:\r\n            with open(self.config_file, 'w', encoding='utf-8') as f:\r\n                self.config.write(f)\r\n            self.logger.info(f\"設定ファイル '{self.config_file}' を保存しました\")\r\n        except Exception as e:\r\n            self.logger.error(f\"設定ファイル保存エラー: {e}\")\r\n    \r\n    def get_detection_settings(self) -> Dict[str, Any]:\r\n        \"\"\"検出設定を取得\"\"\"\r\n        return {\r\n            'threshold': self.config.getfloat('DETECTION', 'threshold', fallback=0.8),\r\n            'tap_cooldown': self.config.getfloat('DETECTION', 'tap_cooldown', fallback=0.5),\r\n            'capture_interval': self.config.getfloat('DETECTION', 'capture_interval', fallback=0.1),\r\n            'max_error_count': self.config.getint('DETECTION', 'max_error_count', fallback=5)\r\n        }\r\n    \r\n    def set_detection_settings(self, settings: Dict[str, Any]):\r\n        \"\"\"検出設定を更新\"\"\"\r\n        if 'DETECTION' not in self.config:\r\n            self.config.add_section('DETECTION')\r\n        \r\n        for key, value in settings.items():\r\n            self.config.set('DETECTION', key, str(value))\r\n        \r\n        self.save_config()\r\n    \r\n    def get_device_settings(self) -> Dict[str, Any]:\r\n        \"\"\"デバイス設定を取得\"\"\"\r\n        device_list_str = self.config.get('DEVICES', 'device_list', fallback='')\r\n        device_list = [d.strip() for d in device_list_str.split(',') if d.strip()]\r\n        \r\n        return {\r\n            'auto_detect': self.config.getboolean('DEVICES', 'auto_detect', fallback=True),\r\n            'device_list': device_list\r\n        }\r\n    \r\n    def set_device_settings(self, settings: Dict[str, Any]):\r\n        \"\"\"デバイス設定を更新\"\"\"\r\n        if 'DEVICES' not in self.config:\r\n            self.config.add_section('DEVICES')\r\n        \r\n        if 'auto_detect' in settings:\r\n            self.config.set('DEVICES', 'auto_detect', str(settings['auto_detect']))\r\n        \r\n        if 'device_list' in settings:\r\n            device_list_str = ','.join(settings['device_list'])\r\n            self.config.set('DEVICES', 'device_list', device_list_str)\r\n        \r\n        self.save_config()\r\n    \r\n    def get_logging_settings(self) -> Dict[str, Any]:\r\n        \"\"\"ログ設定を取得\"\"\"\r\n        return {\r\n            'level': self.config.get('LOGGING', 'level', fallback='INFO'),\r\n            'file': self.config.get('LOGGING', 'file', fallback='automation.log'),\r\n            'max_size_mb': self.config.getint('LOGGING', 'max_size_mb', fallback=10),\r\n            'backup_count': self.config.getint('LOGGING', 'backup_count', fallback=5)\r\n        }\r\n    \r\n    def get_gui_settings(self) -> Dict[str, Any]:\r\n        \"\"\"GUI設定を取得\"\"\"\r\n        return {\r\n            'window_width': self.config.getint('GUI', 'window_width', fallback=800),\r\n            'window_height': self.config.getint('GUI', 'window_height', fallback=600),\r\n            'always_on_top': self.config.getboolean('GUI', 'always_on_top', fallback=False),\r\n            'minimize_to_tray': self.config.getboolean('GUI', 'minimize_to_tray', fallback=True)\r\n        }\r\n    \r\n    def set_gui_settings(self, settings: Dict[str, Any]):\r\n        \"\"\"GUI設定を更新\"\"\"\r\n        if 'GUI' not in self.config:\r\n            self.config.add_section('GUI')\r\n        \r\n        for key, value in settings.items():\r\n            self.config.set('GUI', key, str(value))\r\n        \r\n        self.save_config()\r\n    \r\n    def get_template_settings(self) -> Dict[str, str]:\r\n        \"\"\"テンプレート設定を取得\"\"\"\r\n        return {\r\n            'directory': self.config.get('TEMPLATES', 'directory', fallback='image'),\r\n            'boss_file': self.config.get('TEMPLATES', 'boss_file', fallback='boss.jpg'),\r\n            'play_file': self.config.get('TEMPLATES', 'play_file', fallback='play.png'),\r\n            'puzzle_file': self.config.get('TEMPLATES', 'puzzle_file', fallback='puzzle.png'),\r\n            'waza_ok_file': self.config.get('TEMPLATES', 'waza_ok_file', fallback='waza_ok.png'),\r\n            'next_file': self.config.get('TEMPLATES', 'next_file', fallback='next.png'),\r\n            'stage_45_file': self.config.get('TEMPLATES', 'stage_45_file', fallback='stage_45.png'),\r\n            'close_file': self.config.get('TEMPLATES', 'close_file', fallback='close.png'),\r\n            'close_mini_file': self.config.get('TEMPLATES', 'close_mini_file', fallback='close_mini.png')\r\n        }\r\n\r\n\r\ndef setup_logging(config_manager: ConfigManager):\r\n    \"\"\"ロギング設定をセットアップ\"\"\"\r\n    log_settings = config_manager.get_logging_settings()\r\n    \r\n    # ログレベルの設定\r\n    log_level = getattr(logging, log_settings['level'].upper(), logging.INFO)\r\n    \r\n    # ログフォーマット\r\n    formatter = logging.Formatter(\r\n        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\r\n    )\r\n    \r\n    # ファイルハンドラー（ロー테ーション対応）\r\n    from logging.handlers import RotatingFileHandler\r\n    file_handler = RotatingFileHandler(\r\n        log_settings['file'],\r\n        maxBytes=log_settings['max_size_mb'] * 1024 * 1024,\r\n        backupCount=log_settings['backup_count'],\r\n        encoding='utf-8'\r\n    )\r\n    file_handler.setFormatter(formatter)\r\n    \r\n    # コンソールハンドラー\r\n    console_handler = logging.StreamHandler()\r\n    console_handler.setFormatter(formatter)\r\n    \r\n    # ルートロガーの設定\r\n    root_logger = logging.getLogger()\r\n    root_logger.setLevel(log_level)\r\n    root_logger.addHandler(file_handler)\r\n    root_logger.addHandler(console_handler)\r\n    \r\n    # 既存のハンドラーをクリア（重複を防ぐ）\r\n    for handler in root_logger.handlers[:-2]:\r\n        root_logger.removeHandler(handler)\r\n"
        }
    ]
}